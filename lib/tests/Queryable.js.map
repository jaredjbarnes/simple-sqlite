{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","createDatabaseAsync","database","TableCreator","createTableIfNotExistsAsync","schema","testSchema","fillDatabaseAsync","table","tests","x","testsPromise","addAsync","firstName","push","Promise","all","exports","sqlite","Database","createDatabasePromise","Repository","then","where","column","endsWith","or","startsWith","and","contains","orderByDesc","toArrayAsync","results","equal","length","removeAsync","close","catch","error","isIn","select","take","getFirstAsync","result","updateAsync","getCountAsync","count"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Repository from \"../sqlite/Repository\";\nimport testSchema from \"../testSchemas/person\";\nimport TableCreator from \"../sqlite/TableCreator\";\n\nconst createDatabaseAsync = (database) => {\n    return TableCreator.createTableIfNotExistsAsync({\n        database, \n        schema: testSchema\n    });\n}\n\nconst fillDatabaseAsync = (table) => {\n    const tests = [];\n\n    for (let x = 0; x < 300; x++) {\n        const testsPromise = table.addAsync({\n            firstName: `John_${x}_`\n        });\n        tests.push(testsPromise);\n    }\n\n    return Promise.all(tests);\n\n}\n\nexports[\"Queryable: toArrayAsync.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"ohn_1_\")\n            .or()\n            .column(\"firstName\")\n            .startsWith(\"John_2_\")\n            .and()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .orderByDesc(\"id\")\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 2);\n\n        return table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .removeAsync();\n    }).then(() => {\n        return table.where().toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: IsIn with Queryable.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .isIn(table.where().select({\"firstName\": \"firstName\"}).take(1))\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: IsIn with Array.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .isIn([`John_1_`])\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: getFirstAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"_1_\")\n            .getFirstAsync();\n    }).then((result) => {\n        assert.equal(result != null, true);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: removeAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .removeAsync();\n    }).then(() => {\n        return table.where().toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: updateAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"hn_1_\")\n            .updateAsync({\n                firstName: \"Jane\"\n            });\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"Jane\")\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results[0].firstName, \"Jane\");\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: getCountAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .getCountAsync()\n    }).then((count) => {\n        assert.equal(count, 300);\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n"]}