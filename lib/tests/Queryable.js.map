{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","createDatabaseAsync","database","TableCreator","createTableIfNotExistsAsync","schema","testSchema","fillDatabaseAsync","table","tests","x","testsPromise","addAsync","firstName","push","Promise","all","exports","sqlite","Database","createDatabasePromise","Repository","then","where","column","endsWith","orderByDesc","toArrayAsync","results","equal","length","contains","removeAsync","close","catch","error","isIn","select","take","getFirstAsync","result","updateAsync","getCountAsync","count"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Repository from \"../sqlite/Repository\";\nimport testSchema from \"../testSchemas/person\";\nimport TableCreator from \"../sqlite/TableCreator\";\n\nconst createDatabaseAsync = (database) => {\n    return TableCreator.createTableIfNotExistsAsync({\n        database, \n        schema: testSchema\n    });\n}\n\nconst fillDatabaseAsync = (table) => {\n    const tests = [];\n\n    for (let x = 0; x < 300; x++) {\n        const testsPromise = table.addAsync({\n            firstName: `John${x}`\n        });\n        tests.push(testsPromise);\n    }\n\n    return Promise.all(tests);\n\n}\n\nexports[\"Queryable: toArrayAsync.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"ohn1\")\n            .orderByDesc(\"id\")\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n\n        return table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .removeAsync();\n    }).then(() => {\n        return table.where().toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: IsIn with Queryable.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .isIn(table.where().select({\"firstName\": \"firstName\"}).take(1))\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: IsIn with Array.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .isIn([`John1`])\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: getFirstAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"1\")\n            .getFirstAsync();\n    }).then((result) => {\n        assert.equal(result != null, true);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: removeAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .removeAsync();\n    }).then(() => {\n        return table.where().toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: updateAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"John1\")\n            .updateAsync({\n                firstName: \"Jane\"\n            });\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .endsWith(\"Jane\")\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results[0].firstName, \"Jane\");\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: getCountAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        schema: testSchema\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"firstName\")\n            .contains(\"John\")\n            .getCountAsync()\n    }).then((count) => {\n        assert.equal(count, 300);\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n"]}