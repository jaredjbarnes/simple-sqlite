{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","createDatabaseAsync","database","Promise","resolve","reject","run","error","fillDatabaseAsync","table","tests","x","testsPromise","addAsync","url","push","all","exports","sqlite","Database","createDatabasePromise","Repository","name","then","where","column","endsWith","or","startsWith","contains","orderByDesc","toArrayAsync","results","equal","length","removeAsync","close","catch","isIn","select","take","getFirstAsync","result","updateAsync","getCountAsync","count"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Repository from \"../sqlite/Repository\";\n\nconst createDatabaseAsync = (database) => {\n    return new Promise((resolve, reject) => {\n        database.run(\n            `CREATE TABLE IF NOT EXISTS test (\n                id integer PRIMARY KEY,\n                url text NOT NULL UNIQUE\n            )`,\n            (error) => {\n                if (error != null) {\n                    reject(error);\n                } else {\n                    resolve();\n                }\n            }\n        );\n    });\n}\n\nconst fillDatabaseAsync = (table) => {\n    const tests = [];\n\n    for (let x = 0; x < 300; x++) {\n        const testsPromise = table.addAsync({\n            url: `/api/${x}.xhtml`\n        });\n        tests.push(testsPromise);\n    }\n\n    return Promise.all(tests);\n\n}\n\nexports[\"Queryable: toArrayAsync.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .endsWith(\"/1.xhtml\")\n            .or()\n            .column(\"url\")\n            .startsWith(\"//api/2.x\")\n            .or()\n            .column(\"url\")\n            .contains(\"/3.xhtm\")\n            .orderByDesc(\"id\")\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 3);\n\n        return table.where()\n            .column(\"url\")\n            .contains(\".xhtml\")\n            .removeAsync();\n    }).then(() => {\n        return table.where().toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch(() => {\n        database.close();\n    });\n\n};\n\nexports[\"Queryable: IsIn with Queryable.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .isIn(table.where().select({\"url\": \"url\"}).take(1))\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: IsIn with Array.\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .isIn([`/api/1.xhtml`])\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: getFirstAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .endsWith(\"/1.xhtml\")\n            .getFirstAsync();\n    }).then((result) => {\n        assert.equal(result != null, true);\n        database.close();\n    }).catch(() => {\n        database.close();\n    });\n\n};\n\nexports[\"Queryable: removeAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .contains(\".xhtml\")\n            .removeAsync();\n    }).then(() => {\n        return table.where().toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch(() => {\n        database.close();\n    });\n\n};\n\nexports[\"Queryable: updateAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .endsWith(\"/1.xhtml\")\n            .updateAsync({\n                url: \"New Value\"\n            });\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .endsWith(\"New Value\")\n            .toArrayAsync();\n    }).then((results) => {\n        assert.equal(results[0].url, \"New Value\");\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n\nexports[\"Queryable: getCountAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const createDatabasePromise = createDatabaseAsync(database);\n    const table = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabasePromise.then(() => {\n        return fillDatabaseAsync(table);\n    }).then(() => {\n        return table.where()\n            .column(\"url\")\n            .endsWith(\"xhtml\")\n            .getCountAsync()\n    }).then((count) => {\n        assert.equal(count, 300);\n    }).catch((error) => {\n        database.close();\n        throw error;\n    });\n\n};\n"]}