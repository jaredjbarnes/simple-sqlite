{"version":3,"sources":["../../src/tests/Repository.js"],"names":["assert","createDatabaseAsync","database","Promise","resolve","reject","run","error","exports","sqlite","Database","repository","Repository","name","then","addAsync","data","close","catch","id","lastID","updateAsync","where","column","isEqualTo","toArrayAsync","results","equal","length","removeAsync"],"mappings":"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","file":"Repository.js","sourcesContent":["import * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Repository from \"../sqlite/Repository\";\n\nconst createDatabaseAsync = (database) => {\n    return new Promise((resolve, reject) => {\n        database.run(\n            `CREATE TABLE IF NOT EXISTS test (\n                id integer PRIMARY KEY,\n                data text NOT NULL UNIQUE\n            )`,\n            (error) => {\n                if (error != null) {\n                    reject(error);\n                } else {\n                    resolve();\n                }\n            }\n        );\n    });\n}\n\nexports[\"Repository: addAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const repository = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabaseAsync(database).then(() => {\n        return repository.addAsync({ data: \"blah\" });\n    }).then(() => {\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Repository: updateAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const repository = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabaseAsync(database).then(() => {\n        return repository.addAsync({ data: \"blah\" });\n    }).then(({ lastID: id }) => {\n        return repository.updateAsync({\n            id: id,\n            data: \"blah2\"\n        });\n    }).then(() => {\n        return repository.where().column(\"data\").isEqualTo(\"blah2\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Repository: removeAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const repository = new Repository({\n        database,\n        name: \"test\"\n    });\n\n    return createDatabaseAsync(database).then(() => {\n        return repository.addAsync({ data: \"blah\" });\n    }).then(({ lastID: id }) => {\n        return repository.removeAsync({\n            id: id\n        });\n    }).then(() => {\n        return repository.where().column(\"data\").isEqualTo(\"blah\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n"]}