{"version":3,"sources":["../../src/tests/TableStatementCreator.js"],"names":["assert","exports","schemaToSqliteFactory","SchemaToSqliteFactory","personSchema","createTableStatement","expectedSql","equal","sql","addressSchema","phoneNumberSchema"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAC,QAAQ,uCAAR,IAAmD,YAAM;AACrD,QAAMC,wBAAwB,IAAIC,+BAAJ,CAA0BC,gBAA1B,CAA9B;AACA,QAAMC,uBAAuBH,sBAAsBG,oBAAtB,EAA7B;AACA,QAAMC,iKAAN;;AAEAN,WAAOO,KAAP,CAAaF,qBAAqBG,GAAlC,EAAuCF,WAAvC;AACH,CAND;;AAQAL,QAAQ,wCAAR,IAAoD,YAAM;AACtD,QAAMC,wBAAwB,IAAIC,+BAAJ,CAA0BM,iBAA1B,CAA9B;AACA,QAAMJ,uBAAuBH,sBAAsBG,oBAAtB,EAA7B;AACA,QAAMC,2QAAN;;AAEAN,WAAOO,KAAP,CAAaF,qBAAqBG,GAAlC,EAAuCF,WAAvC;AACH,CAND;;AAQAL,QAAQ,6CAAR,IAAyD,YAAM;AAC3D,QAAMC,wBAAwB,IAAIC,+BAAJ,CAA0BO,qBAA1B,CAA9B;AACA,QAAML,uBAAuBH,sBAAsBG,oBAAtB,EAA7B;AACA,QAAMC,iPAAN;;AAEAN,WAAOO,KAAP,CAAaF,qBAAqBG,GAAlC,EAAuCF,WAAvC;AACH,CAND","file":"TableStatementCreator.js","sourcesContent":["import * as assert from \"assert\";\nimport SchemaToSqliteFactory from \"../sqlite/statements/TableStatementCreator\"\nimport personSchema from \"../testSchemas/person\";\nimport addressSchema from \"../testSchemas/address\";\nimport phoneNumberSchema from \"../testSchemas/phoneNumber\";\n\nexports[\"SchemaToSqliteFactory: Person Schema.\"] = () => {\n    const schemaToSqliteFactory = new SchemaToSqliteFactory(personSchema);\n    const createTableStatement = schemaToSqliteFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"person_0.0.1\" (\"id\" INTEGER, \"firstName\" TEXT, \"lastName\" TEXT, \"dateOfBirth\" INTEGER, PRIMARY KEY(\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"SchemaToSqliteFactory: Address Schema.\"] = () => {\n    const schemaToSqliteFactory = new SchemaToSqliteFactory(addressSchema);\n    const createTableStatement = schemaToSqliteFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address_0.0.1\" (\"id\" INTEGER, \"address\" TEXT, \"city\" TEXT, \"state\" INTEGER, \"zipCode\" INTEGER, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), FOREIGN KEY (\"personId\") REFERENCES \"person_0.0.1\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"SchemaToSqliteFactory: Phone Number Schema.\"] = () => {\n    const schemaToSqliteFactory = new SchemaToSqliteFactory(phoneNumberSchema);\n    const createTableStatement = schemaToSqliteFactory.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address_0.0.1\" (\"id\" INTEGER, \"type\" TEXT, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), UNIQUE (\"personId\",\"type\"), FOREIGN KEY (\"personId\") REFERENCES \"person_0.0.1\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};"]}