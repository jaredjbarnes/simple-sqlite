{"version":3,"sources":["../../src/tests/TableStatementCreator.js"],"names":["exports","tableStatementCreator","TableStatementCreator","personSchema","createTableStatement","expectedSql","assert","equal","sql","addressSchema","phoneNumberSchema","indexStatement","createIndexStatements"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEAA,OAAO,CAAC,uCAAD,CAAP,GAAmD,MAAM;AACrD,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BC,eAA1B,CAA9B;AACA,QAAMC,oBAAoB,GAAGH,qBAAqB,CAACG,oBAAtB,EAA7B;AACA,QAAMC,WAAW,GAAI,iIAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,wCAAD,CAAP,GAAoD,MAAM;AACtD,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BO,gBAA1B,CAA9B;AACA,QAAML,oBAAoB,GAAGH,qBAAqB,CAACG,oBAAtB,EAA7B;AACA,QAAMC,WAAW,GAAI,2NAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,6CAAD,CAAP,GAAyD,MAAM;AAC3D,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BQ,oBAA1B,CAA9B;AACA,QAAMN,oBAAoB,GAAGH,qBAAqB,CAACG,oBAAtB,EAA7B;AACA,QAAMC,WAAW,GAAI,uMAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaH,oBAAoB,CAACI,GAAlC,EAAuCH,WAAvC;AACH,CAND;;AAQAL,OAAO,CAAC,iCAAD,CAAP,GAA6C,MAAM;AAC/C,QAAMC,qBAAqB,GAAG,IAAIC,8BAAJ,CAA0BO,gBAA1B,CAA9B;AACA,QAAME,cAAc,GAAGV,qBAAqB,CAACW,qBAAtB,EAAvB;AACA,QAAMP,WAAW,GAAI,kIAArB;AAEAC,EAAAA,MAAM,CAACC,KAAP,CAAaI,cAAb,EAA6BN,WAA7B;AACH,CAND","sourcesContent":["import * as assert from \"assert\";\nimport TableStatementCreator from \"../sqlite/statements/TableStatementCreator\"\nimport personSchema from \"../testSchemas/person\";\nimport addressSchema from \"../testSchemas/address\";\nimport phoneNumberSchema from \"../testSchemas/phoneNumber\";\n\nexports[\"TableStatementCreator: Person Schema.\"] = () => {\n    const tableStatementCreator = new TableStatementCreator(personSchema);\n    const createTableStatement = tableStatementCreator.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"person\" (\"id\" INTEGER, \"firstName\" TEXT, \"lastName\" TEXT, \"dateOfBirth\" INTEGER, PRIMARY KEY(\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"TableStatementCreator: Address Schema.\"] = () => {\n    const tableStatementCreator = new TableStatementCreator(addressSchema);\n    const createTableStatement = tableStatementCreator.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"address\" (\"id\" INTEGER, \"address\" TEXT, \"city\" TEXT, \"state\" INTEGER, \"zipCode\" INTEGER, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), FOREIGN KEY (\"personId\") REFERENCES \"person\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"TableStatementCreator: Phone Number Schema.\"] = () => {\n    const tableStatementCreator = new TableStatementCreator(phoneNumberSchema);\n    const createTableStatement = tableStatementCreator.createTableStatement();\n    const expectedSql = `CREATE TABLE IF NOT EXISTS \"phoneNumber\" (\"id\" INTEGER, \"type\" TEXT, \"personId\" INTEGER NOT NULL, PRIMARY KEY(\"id\"), UNIQUE (\"personId\",\"type\"), FOREIGN KEY (\"personId\") REFERENCES \"person\" (\"id\"))`;\n\n    assert.equal(createTableStatement.sql, expectedSql);\n};\n\nexports[\"TableStatementCreator: Indexes.\"] = () => {\n    const tableStatementCreator = new TableStatementCreator(addressSchema);\n    const indexStatement = tableStatementCreator.createIndexStatements();\n    const expectedSql = `CREATE INDEX IF NOT EXIST \"address_city\" ON \"address\" (\"city\");CREATE INDEX IF NOT EXIST \"address_state\" ON \"address\" (\"state\");`;\n\n    assert.equal(indexStatement, expectedSql);\n};"],"file":"TableStatementCreator.js"}