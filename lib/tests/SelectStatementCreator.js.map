{"version":3,"sources":["../../src/tests/SelectStatementCreator.js"],"names":["assert","exports","queryable","Queryable","query","type","column","isEqualTo","selectStatementCreator","SelectStatementCreator","createStatement","sql","expected","equal","isNotEqualTo","contains","startsWith","endsWith","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","isIn","isNotIn","select","id","rootQueryable"],"mappings":"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","file":"SelectStatementCreator.js","sourcesContent":["import * as assert from \"assert\";\nimport SelectStatementCreator from \"../sqlite/statements/SelectStatementCreator\";\nimport Queryable from \"../queryable/Queryable\";\n\n\nexports[\"SelectStatementCreator: isEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isEqualTo(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" = 'value' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isNotEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isNotEqualTo(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" != 'value' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: contains.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").contains(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" LIKE '%value%' ESCAPE '\\\\' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: startsWith.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").startsWith(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" LIKE 'value%' ESCAPE '\\\\' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: endsWith.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").endsWith(\"value\");\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" LIKE '%value' ESCAPE '\\\\' LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isGreaterThan.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isGreaterThan(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" > 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isGreaterThanOrEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isGreaterThanOrEqualTo(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" >= 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isLessThan.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isLessThan(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" < 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isLessThanOrEqualTo.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isLessThanOrEqualTo(0);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" <= 0 LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isIn with array.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isIn([\"John\", \"Jane\"]);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" IN ('John', 'Jane') LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isNotIn with array.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isNotIn([\"John\", \"Jane\"]);\n    const selectStatementCreator = new SelectStatementCreator(queryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" NOT IN ('John', 'Jane') LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\n\nexports[\"SelectStatementCreator: isIn with queryable.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"other_table\" } }).select({ id: \"id\" });\n    const rootQueryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isIn(queryable);\n    const selectStatementCreator = new SelectStatementCreator(rootQueryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" IN (SELECT id AS id FROM \"other_table\" LIMIT -1 OFFSET 0) LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}\n\nexports[\"SelectStatementCreator: isNotIn with queryable.\"] = () => {\n    const queryable = new Queryable({ query: { type: \"other_table\" } }).select({ id: \"id\" });\n    const rootQueryable = new Queryable({ query: { type: \"table\" } }).column(\"columnName\").isNotIn(queryable);\n    const selectStatementCreator = new SelectStatementCreator(rootQueryable);\n    const { sql } = selectStatementCreator.createStatement();\n    const expected = `SELECT * FROM \"table\" WHERE \"columnName\" NOT IN (SELECT id AS id FROM \"other_table\" LIMIT -1 OFFSET 0) LIMIT -1 OFFSET 0`;\n\n    assert.equal(sql, expected);\n}"]}