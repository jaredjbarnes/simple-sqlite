{"version":3,"sources":["../../src/tests/TableCreator.js"],"names":["assert","testSchema","primaryKeys","unique","foreignKeys","exports","database","sqlite3","Database","tableCreator","TableCreator","schema","createTableIfNotExistsAsync","then","dropTableIfExistsAsync"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACA;;;;;;;;AAEA,IAAMC,aAAa;AACf,YAAQ,OADO;AAEf,aAAS,OAFM;AAGf,mBAAe,yBAHA;AAIf,eAAW,OAJI;AAKf,eAAW,CACP;AACI,gBAAQ,SADZ;AAEI,gBAAQ,IAFZ;AAGI,iBAAS;AAHb,KADO,EAMP;AACI,gBAAQ,MADZ;AAEI,gBAAQ,MAFZ;AAGI,iBAAS,MAHb;AAII,uBAAe;AAJnB,KANO,EAYP;AACI,gBAAQ,MADZ;AAEI,gBAAQ,MAFZ;AAGI,iBAAS,OAHb;AAII,sBAAc;AAJlB,KAZO,EAkBP;AACI,gBAAQ,SADZ;AAEI,gBAAQ,WAFZ;AAGI,iBAAS,wBAHb;AAII,sBAAc;AAJlB,KAlBO,EAwBP;AACI,gBAAQ,SADZ;AAEI,gBAAQ,UAFZ;AAGI,iBAAS,uBAHb;AAII,sBAAc;AAJlB,KAxBO,CALI;AAoCfC,iBAAa,CAAC,IAAD,CApCE;AAqCfC,YAAQ,EArCO;AAsCfC,iBAAa;AACT,qBAAa;AACT,qBAAS,QADA;AAET,sBAAU;AACN,wBAAQ,aADF;AAEN,2BAAW,OAFL;AAGN,yBAAS,MAHH;AAIN,0BAAU;AAJJ;AAFD,SADJ;AAUT,oBAAY;AACR,qBAAS,QADD;AAER,sBAAU;AACN,wBAAQ,aADF;AAEN,2BAAW,OAFL;AAGN,yBAAS,KAHH;AAIN,0BAAU;AAJJ;AAFF;AAVH;AAtCE,CAAnB;;AA4DAC,QAAQ,4CAAR,IAAwD,YAAM;AAC1D,QAAMC,WAAW,IAAIC,iBAAQC,QAAZ,CAAqB,UAArB,CAAjB;AACA,QAAMC,eAAe,IAAIC,sBAAJ,CAAiB;AAClCC,gBAAQV,UAD0B;AAElCK;AAFkC,KAAjB,CAArB;;AAMA,WAAOG,aAAaG,2BAAb,EAAP;AACH,CATD;;AAWAP,QAAQ,kDAAR,IAA8D,YAAM;AAChE,QAAMC,WAAW,IAAIC,iBAAQC,QAAZ,CAAqB,UAArB,CAAjB;AACA,QAAMC,eAAe,IAAIC,sBAAJ,CAAiB;AAClCC,gBAAQV,UAD0B;AAElCK;AAFkC,KAAjB,CAArB;;AAMA,WAAOG,aAAaG,2BAAb,GAA2CC,IAA3C,CAAgD,YAAM;AACzD,eAAOJ,aAAaG,2BAAb,EAAP;AACH,KAFM,CAAP;AAGH,CAXD;;AAaAP,QAAQ,qDAAR,IAAiE,YAAM;AACnE,QAAMC,WAAW,IAAIC,iBAAQC,QAAZ,CAAqB,UAArB,CAAjB;AACA,QAAMC,eAAe,IAAIC,sBAAJ,CAAiB;AAClCC,gBAAQV,UAD0B;AAElCK;AAFkC,KAAjB,CAArB;;AAKA,WAAOG,aAAaG,2BAAb,GAA2CC,IAA3C,CAAgD,YAAM;AACzD,eAAOJ,aAAaK,sBAAb,EAAP;AACH,KAFM,CAAP;AAGH,CAVD","file":"TableCreator.js","sourcesContent":["import * as assert from \"assert\";\nimport TableCreator from \"../sqlite/TableCreator\"\nimport sqlite3 from \"sqlite3\";\n\nconst testSchema = {\n    \"name\": \"table\",\n    \"label\": \"Table\",\n    \"description\": \"Some great description.\",\n    \"version\": \"1.0.1\",\n    \"columns\": [\n        {\n            \"type\": \"INTEGER\",\n            \"name\": \"id\",\n            \"label\": \"Identifier\"\n        },\n        {\n            \"type\": \"TEXT\",\n            \"name\": \"text\",\n            \"label\": \"Text\",\n            \"description\": \"Some Description.\",\n        },\n        {\n            \"type\": \"REAL\",\n            \"name\": \"real\",\n            \"label\": \"Float\",\n            \"isNullable\": false\n        },\n        {\n            \"type\": \"INTEGER\",\n            \"name\": \"manyToOne\",\n            \"label\": \"Many To One Identifier\",\n            \"isNullable\": false\n        },\n        {\n            \"type\": \"INTEGER\",\n            \"name\": \"oneToOne\",\n            \"label\": \"One to One Identifier\",\n            \"isNullable\": false\n        }\n    ],\n    primaryKeys: [\"id\"],\n    unique: {},\n    foreignKeys: {\n        \"manyToOne\": {\n            \"label\": \"Source\",\n            \"source\": {\n                \"name\": \"other_table\",\n                \"version\": \"1.0.0\",\n                \"label\": \"Many\",\n                \"column\": \"id\"\n            }\n        },\n        \"oneToOne\": {\n            \"label\": \"Source\",\n            \"source\": {\n                \"name\": \"other_table\",\n                \"version\": \"1.0.0\",\n                \"label\": \"One\",\n                \"column\": \"id\"\n            }\n        }\n    }\n};\n\nexports[\"TableCreator: createTableIfNotExistsAsync.\"] = () => {\n    const database = new sqlite3.Database(\":memory:\");\n    const tableCreator = new TableCreator({\n        schema: testSchema,\n        database\n    });\n\n\n    return tableCreator.createTableIfNotExistsAsync();\n}\n\nexports[\"TableCreator: createTableIfNotExistsAsync twice.\"] = () => {\n    const database = new sqlite3.Database(\":memory:\");\n    const tableCreator = new TableCreator({\n        schema: testSchema,\n        database\n    });\n\n\n    return tableCreator.createTableIfNotExistsAsync().then(() => {\n        return tableCreator.createTableIfNotExistsAsync();\n    });\n}\n\nexports[\"TableCreator: createTableIfNotExistsAsync then Drop\"] = () => {\n    const database = new sqlite3.Database(\":memory:\");\n    const tableCreator = new TableCreator({\n        schema: testSchema,\n        database\n    });\n\n    return tableCreator.createTableIfNotExistsAsync().then(() => {\n        return tableCreator.dropTableIfExistsAsync();\n    });\n}"]}