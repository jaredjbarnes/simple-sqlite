{"version":3,"sources":["../../src/tests/SqliteTableCreator.js"],"names":["assert","testSchema","primaryKeys","unique","foreignKeys","exports","database","sqlite3","Database","schemaToSqlite","SqliteDatabaseCreator","schema","createRepositoryIfNotExistsAsync","then","dropRepositoryIfExistsAsync"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACA;;;;;;;;AAEA,IAAMC,aAAa;AACf,YAAQ,YADO;AAEf,aAAS,YAFM;AAGf,mBAAe,yBAHA;AAIf,eAAW,OAJI;AAKf,eAAW,CACP;AACI,gBAAQ,SADZ;AAEI,gBAAQ,IAFZ;AAGI,iBAAS;AAHb,KADO,EAMP;AACI,gBAAQ,MADZ;AAEI,gBAAQ,MAFZ;AAGI,iBAAS,MAHb;AAII,uBAAe;AAJnB,KANO,EAYP;AACI,gBAAQ,MADZ;AAEI,gBAAQ,MAFZ;AAGI,iBAAS,OAHb;AAII,sBAAc;AAJlB,KAZO,EAkBP;AACI,gBAAQ,SADZ;AAEI,gBAAQ,WAFZ;AAGI,iBAAS,wBAHb;AAII,sBAAc;AAJlB,KAlBO,EAwBP;AACI,gBAAQ,SADZ;AAEI,gBAAQ,UAFZ;AAGI,iBAAS,uBAHb;AAII,sBAAc;AAJlB,KAxBO,CALI;AAoCfC,iBAAa,CAAC,IAAD,CApCE;AAqCfC,YAAQ,CACJ,CAAC,UAAD,CADI,CArCO;AAwCfC,iBAAa;AACT,qBAAa;AACT,qBAAS,QADA;AAET,sBAAU;AACN,wBAAQ,aADF;AAEN,2BAAW,OAFL;AAGN,yBAAS,MAHH;AAIN,0BAAU;AAJJ;AAFD,SADJ;AAUT,oBAAY;AACR,qBAAS,QADD;AAER,sBAAU;AACN,wBAAQ,aADF;AAEN,2BAAW,OAFL;AAGN,yBAAS,KAHH;AAIN,0BAAU;AAJJ;AAFF;AAVH;AAxCE,CAAnB;;AA8DAC,QAAQ,0DAAR,IAAsE,YAAM;AACxE,QAAMC,WAAW,IAAIC,iBAAQC,QAAZ,CAAqB,UAArB,CAAjB;AACA,QAAMC,iBAAiB,IAAIC,sBAAJ,CAA0B;AAC7CC,gBAAQV,UADqC;AAE7CK;AAF6C,KAA1B,CAAvB;;AAMA,WAAOG,eAAeG,gCAAf,EAAP;AACH,CATD;;AAWAP,QAAQ,gEAAR,IAA4E,YAAM;AAC9E,QAAMC,WAAW,IAAIC,iBAAQC,QAAZ,CAAqB,UAArB,CAAjB;AACA,QAAMC,iBAAiB,IAAIC,sBAAJ,CAA0B;AAC7CC,gBAAQV,UADqC;AAE7CK;AAF6C,KAA1B,CAAvB;;AAMA,WAAOG,eAAeG,gCAAf,GAAkDC,IAAlD,CAAuD,YAAM;AAChE,eAAOJ,eAAeG,gCAAf,EAAP;AACH,KAFM,CAAP;AAGH,CAXD;;AAaAP,QAAQ,mEAAR,IAA+E,YAAM;AACjF,QAAMC,WAAW,IAAIC,iBAAQC,QAAZ,CAAqB,UAArB,CAAjB;AACA,QAAMC,iBAAiB,IAAIC,sBAAJ,CAA0B;AAC7CC,gBAAQV,UADqC;AAE7CK;AAF6C,KAA1B,CAAvB;;AAKA,WAAOG,eAAeG,gCAAf,GAAkDC,IAAlD,CAAuD,YAAM;AAChE,eAAOJ,eAAeK,2BAAf,EAAP;AACH,KAFM,CAAP;AAGH,CAVD","file":"SqliteTableCreator.js","sourcesContent":["import * as assert from \"assert\";\nimport SqliteDatabaseCreator from \"../sqlite/TableCreator\"\nimport sqlite3 from \"sqlite3\";\n\nconst testSchema = {\n    \"name\": \"repository\",\n    \"label\": \"Repository\",\n    \"description\": \"Some great description.\",\n    \"version\": \"1.0.1\",\n    \"columns\": [\n        {\n            \"type\": \"INTEGER\",\n            \"name\": \"id\",\n            \"label\": \"Identifier\"\n        },\n        {\n            \"type\": \"TEXT\",\n            \"name\": \"text\",\n            \"label\": \"Text\",\n            \"description\": \"Some Description.\",\n        },\n        {\n            \"type\": \"REAL\",\n            \"name\": \"real\",\n            \"label\": \"Float\",\n            \"isNullable\": false\n        },\n        {\n            \"type\": \"INTEGER\",\n            \"name\": \"manyToOne\",\n            \"label\": \"Many To One Identifier\",\n            \"isNullable\": false\n        },\n        {\n            \"type\": \"INTEGER\",\n            \"name\": \"oneToOne\",\n            \"label\": \"One to One Identifier\",\n            \"isNullable\": false\n        }\n    ],\n    primaryKeys: [\"id\"],\n    unique: [\n        [\"oneToOne\"]\n    ],\n    foreignKeys: {\n        \"manyToOne\": {\n            \"label\": \"Source\",\n            \"source\": {\n                \"name\": \"other_table\",\n                \"version\": \"1.0.0\",\n                \"label\": \"Many\",\n                \"column\": \"id\"\n            }\n        },\n        \"oneToOne\": {\n            \"label\": \"Source\",\n            \"source\": {\n                \"name\": \"other_table\",\n                \"version\": \"1.0.0\",\n                \"label\": \"One\",\n                \"column\": \"id\"\n            }\n        }\n    }\n};\n\nexports[\"SqliteDatabaseCreator: createRepositoryIfNotExistsAsync.\"] = () => {\n    const database = new sqlite3.Database(\":memory:\");\n    const schemaToSqlite = new SqliteDatabaseCreator({\n        schema: testSchema,\n        database\n    });\n\n\n    return schemaToSqlite.createRepositoryIfNotExistsAsync();\n}\n\nexports[\"SqliteDatabaseCreator: createRepositoryIfNotExistsAsync twice.\"] = () => {\n    const database = new sqlite3.Database(\":memory:\");\n    const schemaToSqlite = new SqliteDatabaseCreator({\n        schema: testSchema,\n        database\n    });\n\n\n    return schemaToSqlite.createRepositoryIfNotExistsAsync().then(() => {\n        return schemaToSqlite.createRepositoryIfNotExistsAsync();\n    });\n}\n\nexports[\"SqliteDatabaseCreator: createRepositoryIfNotExistsAsync then Drop\"] = () => {\n    const database = new sqlite3.Database(\":memory:\");\n    const schemaToSqlite = new SqliteDatabaseCreator({\n        schema: testSchema,\n        database\n    });\n\n    return schemaToSqlite.createRepositoryIfNotExistsAsync().then(() => {\n        return schemaToSqlite.dropRepositoryIfExistsAsync();\n    });\n}"]}