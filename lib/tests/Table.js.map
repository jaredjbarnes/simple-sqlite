{"version":3,"sources":["../../src/tests/Table.js"],"names":["assert","exports","database","sqlite","Database","table","Table","schema","personSchema","TableCreator","createTableIfNotExistsAsync","then","addAsync","firstName","close","catch","error","id","lastID","updateAsync","where","column","isEqualTo","toArrayAsync","results","equal","length","removeAsync"],"mappings":";;AACA;;IAAYA,M;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAC,QAAQ,iBAAR,IAA6B,YAAY;AACrC,QAAMC,WAAW,IAAIC,iBAAOC,QAAX,CAAoB,UAApB,CAAjB;AACA,QAAMC,QAAQ,IAAIC,eAAJ,CAAU;AACpBJ,0BADoB;AAEpBK,gBAAQC;AAFY,KAAV,CAAd;;AAKA,WAAOC,uBAAaC,2BAAb,CAAyC;AAC5CR,0BAD4C;AAE5CK,gBAAQC;AAFoC,KAAzC,EAGJG,IAHI,CAGC,YAAM;AACV,eAAON,MAAMO,QAAN,CAAe,EAAEC,WAAW,MAAb,EAAf,CAAP;AACH,KALM,EAKJF,IALI,CAKC,YAAM;AACVT,iBAASY,KAAT;AACH,KAPM,EAOJC,KAPI,CAOE,UAACC,KAAD,EAAW;AAChBd,iBAASY,KAAT;AACA,cAAME,KAAN;AACH,KAVM,CAAP;AAWH,CAlBD;;AAoBAf,QAAQ,oBAAR,IAAgC,YAAY;AACxC,QAAMC,WAAW,IAAIC,iBAAOC,QAAX,CAAoB,UAApB,CAAjB;AACA,QAAMC,QAAQ,IAAIC,eAAJ,CAAU;AACpBJ,0BADoB;AAEpBK,gBAAQC;AAFY,KAAV,CAAd;;AAKA,WAAOC,uBAAaC,2BAAb,CAAyC;AAC5CR,0BAD4C;AAE5CK,gBAAQC;AAFoC,KAAzC,EAGJG,IAHI,CAGC,YAAM;AACV,eAAON,MAAMO,QAAN,CAAe,EAAEC,WAAW,MAAb,EAAf,CAAP;AACH,KALM,EAKJF,IALI,CAKC,gBAAoB;AAAA,YAATM,EAAS,QAAjBC,MAAiB;;AACxB,eAAOb,MAAMc,WAAN,CAAkB;AACrBF,gBAAIA,EADiB;AAErBJ,uBAAW;AAFU,SAAlB,CAAP;AAIH,KAVM,EAUJF,IAVI,CAUC,YAAM;AACV,eAAON,MAAMe,KAAN,GAAcC,MAAd,CAAqB,WAArB,EAAkCC,SAAlC,CAA4C,MAA5C,EAAoDC,YAApD,EAAP;AACH,KAZM,EAYJZ,IAZI,CAYC,UAACa,OAAD,EAAa;AACjBxB,eAAOyB,KAAP,CAAaD,QAAQE,MAArB,EAA6B,CAA7B;AACAxB,iBAASY,KAAT;AACH,KAfM,EAeJC,KAfI,CAeE,UAACC,KAAD,EAAW;AAChBd,iBAASY,KAAT;AACA,cAAME,KAAN;AACH,KAlBM,CAAP;AAmBH,CA1BD;;AA4BAf,QAAQ,oBAAR,IAAgC,YAAY;AACxC,QAAMC,WAAW,IAAIC,iBAAOC,QAAX,CAAoB,UAApB,CAAjB;AACA,QAAMC,QAAQ,IAAIC,eAAJ,CAAU;AACpBJ,0BADoB;AAEpBK,gBAAQC;AAFY,KAAV,CAAd;;AAKA,WAAOC,uBAAaC,2BAAb,CAAyC;AAC5CR,0BAD4C;AAE5CK,gBAAQC;AAFoC,KAAzC,EAGJG,IAHI,CAGC,YAAM;AACV,eAAON,MAAMO,QAAN,CAAe,EAAEC,WAAW,MAAb,EAAf,CAAP;AACH,KALM,EAKJF,IALI,CAKC,iBAAoB;AAAA,YAATM,EAAS,SAAjBC,MAAiB;;AACxB,eAAOb,MAAMsB,WAAN,CAAkB;AACrBV,gBAAIA;AADiB,SAAlB,CAAP;AAGH,KATM,EASJN,IATI,CASC,YAAM;AACV,eAAON,MAAMe,KAAN,GAAcC,MAAd,CAAqB,WAArB,EAAkCC,SAAlC,CAA4C,MAA5C,EAAoDC,YAApD,EAAP;AACH,KAXM,EAWJZ,IAXI,CAWC,UAACa,OAAD,EAAa;AACjBxB,eAAOyB,KAAP,CAAaD,QAAQE,MAArB,EAA6B,CAA7B;AACAxB,iBAASY,KAAT;AACH,KAdM,EAcJC,KAdI,CAcE,UAACC,KAAD,EAAW;AAChBd,iBAASY,KAAT;AACA,cAAME,KAAN;AACH,KAjBM,CAAP;AAkBH,CAzBD","file":"Table.js","sourcesContent":["\nimport * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Table from \"../sqlite/Table\";\nimport personSchema from \"../testSchemas/person\";\nimport TableCreator from \"../sqlite/TableCreator\";\n\nexports[\"Table: addAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(() => {\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: updateAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(({ lastID: id }) => {\n        return table.updateAsync({\n            id: id,\n            firstName: \"Jane\"\n        });\n    }).then(() => {\n        return table.where().column(\"firstName\").isEqualTo(\"Jane\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: removeAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(({ lastID: id }) => {\n        return table.removeAsync({\n            id: id\n        });\n    }).then(() => {\n        return table.where().column(\"firstName\").isEqualTo(\"John\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n"]}