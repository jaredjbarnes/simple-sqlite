{"version":3,"sources":["../../src/tests/Table.js"],"names":["assert","exports","database","sqlite","Database","table","Table","schema","personSchema","TableCreator","createTableIfNotExistsAsync","then","addAsync","firstName","close","catch","error","id","lastID","updateAsync","where","column","isEqualTo","toArrayAsync","results","equal","length","removeAsync","lifeCycleDelegate","prepareEntityToBeAddedAsync","entity","lastName","Error","message","called","canEntityBeAddedAsync","entityAddedAsync","prepareEntityToBeUpdatedAsync","refineQueryable","queryable","or"],"mappings":"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","file":"Table.js","sourcesContent":["\nimport * as assert from \"assert\";\nimport sqlite from \"sqlite3\";\nimport Table from \"../sqlite/Table\";\nimport personSchema from \"../testSchemas/person\";\nimport TableCreator from \"../sqlite/TableCreator\";\n\nexports[\"Table: addAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(() => {\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: updateAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(({ lastID: id }) => {\n        return table.updateAsync({\n            id: id,\n            firstName: \"Jane\"\n        });\n    }).then(() => {\n        return table.where().column(\"firstName\").isEqualTo(\"Jane\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: removeAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(({ lastID: id }) => {\n        return table.removeAsync({\n            id: id\n        });\n    }).then(() => {\n        return table.where().column(\"firstName\").isEqualTo(\"John\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: prepareEntityToBeAddedAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            prepareEntityToBeAddedAsync: (entity) => {\n                return {\n                    firstName: entity.firstName,\n                    lastName: \"Doe\"\n                };\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(() => {\n        return table.where().column(\"lastName\").isEqualTo(\"Doe\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: prepareEntityToBeAddedAsync:failed\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            prepareEntityToBeAddedAsync: (entity) => {\n                throw new Error(\"Can't access database.\");\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).catch((error) => {\n        assert.equal(error.message, \"Can't access database.\");\n        database.close();\n    })\n};\n\nexports[\"Table: canEntityBeAddedAsync\"] = function () {\n    let called = false;\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            canEntityBeAddedAsync: (entity) => {\n                called = true;\n                return true;\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(() => {\n        assert.equal(called, true);\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: canEntityBeAddedAsync: failed\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            canEntityBeAddedAsync: (entity) => {\n                let called = false;\n                throw new Error(\"John is already in database.\");\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).catch((error) => {\n        assert.equal(error.message, \"John is already in database.\");\n        database.close();\n    })\n};\n\nexports[\"Table: entityAddedAsync\"] = function () {\n    let called = false;\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            entityAddedAsync: (entity) => {\n                called = true;\n                assert.equal(entity.firstName, \"John\");\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(() => {\n        assert.equal(called, true);\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: entityAddedAsync: failed\"] = function () {\n    let called = false;\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            entityAddedAsync: (entity) => {\n                called = true;\n                throw new Error(\"Didn't complete task.\");\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(() => {\n        assert.equal(called, true);\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: prepareEntityToBeUpdatedAsync\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            prepareEntityToBeUpdatedAsync: (entity) => {\n                entity.lastName = \"Doe\";\n                return entity;\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\" });\n    }).then(({ lastID }) => {\n        return table.updateAsync({\n            id: lastID,\n            lastName: \"Smith\"\n        });\n    }).then(() => {\n        return table.where().column(\"lastName\").isEqualTo(\"Doe\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n\nexports[\"Table: refineQueryable\"] = function () {\n    const database = new sqlite.Database(\":memory:\");\n    const table = new Table({\n        database,\n        schema: personSchema,\n        lifeCycleDelegate: {\n            refineQueryable: (queryable) => {\n                return queryable.or().column(\"lastName\").isEqualTo(\"Doe\");\n            }\n        }\n    });\n\n    return TableCreator.createTableIfNotExistsAsync({\n        database,\n        schema: personSchema\n    }).then(() => {\n        return table.addAsync({ firstName: \"John\", lastName: \"Doe\" });\n    }).then(() => {\n        return table.where().column(\"firstName\").isEqualTo(\"Jane\").toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n        database.close();\n    }).catch((error) => {\n        database.close();\n        throw error;\n    })\n};\n"]}