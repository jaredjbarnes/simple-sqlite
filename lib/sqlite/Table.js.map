{"version":3,"sources":["../../src/sqlite/Table.js"],"names":["Table","database","schema","lifeCycleDelegate","name","SchemaUtils","getTableNameFromSchema","sqliteDatabaseWrapper","Sqlite3Wrapper","primaryKeys","entity","response","then","InsertStatementCreator","createStatement","tableName","sql","values","runAsync","result","catch","error","DeleteStatementCreator","UpdateStatementCreator","Provider","refineQueryable","provider","getQueryProvider","Queryable","query","type","expression","select","limit","offset","orderBy"],"mappings":"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","file":"Table.js","sourcesContent":["import Provider from \"./Provider\";\nimport Queryable from \"../queryable/Queryable\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport InsertStatementCreator from \"./statements/InsertStatementCreator\";\nimport UpdateStatementCreator from \"./statements/UpdateStatementCreator\";\nimport DeleteStatementCreator from \"./statements/DeleteStatementCreator\";\nimport SchemaUtils from \"./utils/SchemaUtils\";\nimport invokeMethodAsync from \"./utils/invokeMethodAsync\";\n\nexport default class Table {\n    constructor({ database, schema, lifeCycleDelegate }) {\n\n        if (lifeCycleDelegate == null || typeof lifeCycleDelegate !== \"object\"){\n            lifeCycleDelegate = {};\n        }\n\n        this.name = SchemaUtils.getTableNameFromSchema(schema);\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n        this.primaryKeys = schema.primaryKeys;\n        this.lifeCycleDelegate = lifeCycleDelegate;\n    }\n\n    addAsync(entity) {\n        let response;\n\n        return invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntityBeAddedAsync\",\n            [entity],\n            true\n        ).then(() => {\n            return invokeMethodAsync(\n                this.lifeCycleDelegate,\n                \"prepareEntityToBeAddedAsync\",\n                [entity],\n                entity\n            );\n        }).then((entity) => {\n            const { sql, values } = InsertStatementCreator.createStatement({\n                tableName: this.name,\n                entity,\n                primaryKeys: this.primaryKeys\n            });\n\n            return this.sqliteDatabaseWrapper.runAsync(sql, values);\n        }).then((result) => {\n            response = result;\n\n            return invokeMethodAsync(\n                this.lifeCycleDelegate,\n                \"entityAddedAsync\",\n                [entity, result],\n                result\n            ).catch((error)=>{\n                // Swallow errors.\n            }); \n        }).then(() => {\n            return response;\n        });\n\n    }\n\n    removeAsync(entity) {\n        let response;\n\n        return invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntityBeRemovedAsync\",\n            [entity],\n            true\n        ).then(() => {\n            return invokeMethodAsync(\n                this.lifeCycleDelegate,\n                \"prepareEntityToBeRemovedAsync\",\n                [entity],\n                entity\n            );\n        }).then((entity) => {\n            const { sql, values } = DeleteStatementCreator.createStatement({\n                tableName: this.name,\n                entity,\n                primaryKeys: this.primaryKeys\n            });\n\n            return this.sqliteDatabaseWrapper.runAsync(sql, values);\n        }).then((result) => {\n            response = result;\n\n            return invokeMethodAsync(\n                this.lifeCycleDelegate,\n                \"entityRemovedAsync\",\n                [entity, result],\n                result\n            ).catch((error)=>{\n                // Swallow errors.\n            }); \n        }).then(() => {\n            return response;\n        });\n\n    }\n\n    updateAsync(entity) {\n        let response;\n\n        return invokeMethodAsync(\n            this.lifeCycleDelegate,\n            \"canEntityBeUpdatedAsync\",\n            [entity],\n            true\n        ).then(() => {\n            return invokeMethodAsync(\n                this.lifeCycleDelegate,\n                \"prepareEntityToBeUpdatedAsync\",\n                [entity],\n                entity\n            );\n        }).then((entity) => {\n            const { sql, values } = UpdateStatementCreator.createStatement({\n                tableName: this.name,\n                entity,\n                primaryKeys: this.primaryKeys\n            });\n\n            return this.sqliteDatabaseWrapper.runAsync(sql, values);\n        }).then((result) => {\n            response = result;\n\n            return invokeMethodAsync(\n                this.lifeCycleDelegate,\n                \"entityUpdatedAsync\",\n                [entity, result],\n                result\n            ).catch((error)=>{\n                // Swallow errors.\n            }); \n        }).then(() => {\n            return response;\n        });\n\n    }\n\n    getQueryProvider() {\n        return new Provider({\n            database: this.database,\n            refineQueryable: this.lifeCycleDelegate.refineQueryable\n        });\n    }\n\n    where() {\n        const provider = this.getQueryProvider();\n\n        return new Queryable({\n            query: {\n                type: this.name,\n                expression: null,\n                select: {},\n                limit: -1,\n                offset: 0,\n                orderBy: []\n            },\n            provider: provider\n        });\n    }\n\n}"]}