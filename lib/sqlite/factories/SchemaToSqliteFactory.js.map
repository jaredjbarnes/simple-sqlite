{"version":3,"sources":["../../../src/sqlite/factories/SchemaToSqliteFactory.js"],"names":["SchemaToSqliteFactory","schema","validator","jsonschema","Validator","expression","filter","part","length","validationResults","validate","repositoryJsonSchema","errors","error","Error","validationErrors","value","replace","toString","keys","primaryKeys","map","column","sqlizeName","join","Array","isArray","unique","columns","foreignKeys","Object","name","schemaUtils","SchemaUtils","source","columnName","getTableName","sourceColumn","validateSchema","tableName","push","createColumnsExpression","createPrimaryKeysExpression","createUniqueColumns","createForeignKeysExpression","cleanedExpression","removeNullOrEmptyStrings","sql","values","type","isRequired","isIndexed","defaultValue","sqlizeValue","createColumnExpression"],"mappings":"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","file":"SchemaToSqliteFactory.js","sourcesContent":["import jsonschema from \"jsonschema\";\nimport repositoryJsonSchema from \"../repositoryJsonSchema\";\nimport SchemaUtils from \"../utils/SchemaUtils\";\n\nexport default class SchemaToSqliteFactory {\n    constructor(schema) {\n        this.schema = schema;\n        this.validator = new jsonschema.Validator();\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    validateSchema() {\n        const validationResults = this.validator.validate(this.schema, repositoryJsonSchema);\n\n        if (validationResults.errors.length > 0) {\n            const error = new Error(\"Schema Error\");\n            error.validationErrors = validationResults.errors;\n            throw error;\n        }\n    }\n\n    sqlizeValue(value) {\n        if (typeof value === \"string\") {\n            return `'${value.replace(/\\'/, \"''\")}'`;\n        } if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n        } else {\n            return value.toString();\n        }\n    }\n\n    sqlizeName(value) {\n        return `\"${value.replace(/\\\"/, \"\\\"\")}\"`;\n    }\n\n    createPrimaryKeysExpression() {\n        const keys = this.schema.primaryKeys.map((column) => {\n            return this.sqlizeName(column);\n        }).join(\", \");\n\n        return `PRIMARY KEY(${keys})`;\n    }\n\n    createUniqueColumns() {\n        if (!Array.isArray(this.schema.unique) || this.schema.unique.length === 0) {\n            return \"\";\n        }\n\n        const columns = this.schema.unique.map((columns) => {\n            return columns.map((column) => {\n                return this.sqlizeName(column);\n            });\n        }).join(\", \");\n\n        return `UNIQUE (${columns})`;\n    }\n\n    createForeignKeysExpression() {\n        const foreignKeys = this.schema.foreignKeys || {};\n\n        return Object.keys(foreignKeys).map((name) => {\n            const column = foreignKeys[name];\n            const schemaUtils = new SchemaUtils(column.source);\n            const columnName = this.sqlizeName(name);\n            const source = this.sqlizeName(schemaUtils.getTableName());\n            const sourceColumn = this.sqlizeName(column.source.column);\n\n            return `FOREIGN KEY (${columnName}) REFERENCES ${source} (${sourceColumn})`;\n        }).join(\", \");\n    }\n\n    createTableStatement() {\n        this.validateSchema();\n        const expression = [];\n        const schemaUtils = new SchemaUtils(this.schema);\n        const tableName = schemaUtils.getTableName();\n\n        expression.push(this.createColumnsExpression());\n        expression.push(this.createPrimaryKeysExpression());\n        expression.push(this.createUniqueColumns());\n        expression.push(this.createForeignKeysExpression());\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        const sql = `CREATE TABLE IF NOT EXISTS ${this.sqlizeName(tableName)} (${cleanedExpression.join(\", \")})`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createDropTableStatment() {\n        const schemaUtils = new SchemaUtils(this.schema);\n        const sql = `DROP TABLE IF EXISTS ${this.sqlizeName(schemaUtils.getTableName())}`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createColumnExpression({\n        name,\n        type,\n        isRequired,\n        isIndexed,\n        defaultValue\n    }) {\n\n        const expression = [];\n        expression.push(`${this.sqlizeName(name)}`);\n\n        expression.push(type);\n\n        if (isRequired) {\n            expression.push(\"NOT NULL\");\n        }\n\n        if (isIndexed) {\n            expression.push(\"INDEXED\");\n        }\n\n        if (defaultValue != null) {\n            expression.push(this.sqlizeValue(defaultValue));\n        }\n\n        return expression.join(\" \");\n    }\n\n    createColumnsExpression() {\n        return this.schema.columns.map((column) => {\n            return this.createColumnExpression(column);\n        }).join(\", \");\n    }\n}"]}