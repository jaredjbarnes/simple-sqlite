{"version":3,"sources":["../../../src/sqlite/factories/SchemaToSqliteFactory.js"],"names":["SchemaToSqliteFactory","schema","validator","jsonschema","Validator","SqliteUtils","escapeName","SchemaUtils","getTableNameFromSchema","expression","filter","part","length","validationResults","validate","repositoryJsonSchema","errors","error","Error","validationErrors","keys","primaryKeys","map","column","join","Array","isArray","unique","columns","foreignKeys","Object","name","columnName","source","sourceColumn","validateSchema","push","createColumnsExpression","createPrimaryKeysExpression","createUniqueColumns","createForeignKeysExpression","cleanedExpression","removeNullOrEmptyStrings","sql","getTableName","values","type","isRequired","isIndexed","defaultValue","sqlizeValue","createColumnExpression"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,qB;AACjB,mCAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,SAAL,GAAiB,IAAIC,qBAAWC,SAAf,EAAjB;AACH;;;;uCAEc;AACX,mBAAOC,sBAAYC,UAAZ,CAAuBC,sBAAYC,sBAAZ,CAAmC,KAAKP,MAAxC,CAAvB,CAAP;AACH;;;iDAEwBQ,U,EAAY;AACjC,mBAAOA,WAAWC,MAAX,CAAkB,UAACC,IAAD,EAAU;AAC/B,uBAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,KAAKC,MAAL,GAAc,CAAjD;AACH,aAFM,CAAP;AAGH;;;yCAEgB;AACb,gBAAMC,oBAAoB,KAAKX,SAAL,CAAeY,QAAf,CAAwB,KAAKb,MAA7B,EAAqCc,8BAArC,CAA1B;;AAEA,gBAAIF,kBAAkBG,MAAlB,CAAyBJ,MAAzB,GAAkC,CAAtC,EAAyC;AACrC,oBAAMK,QAAQ,IAAIC,KAAJ,CAAU,cAAV,CAAd;AACAD,sBAAME,gBAAN,GAAyBN,kBAAkBG,MAA3C;AACA,sBAAMC,KAAN;AACH;AACJ;;;sDAE6B;AAC1B,gBAAMG,OAAO,KAAKnB,MAAL,CAAYoB,WAAZ,CAAwBC,GAAxB,CAA4B,UAACC,MAAD,EAAY;AACjD,uBAAOlB,sBAAYC,UAAZ,CAAuBiB,MAAvB,CAAP;AACH,aAFY,EAEVC,IAFU,CAEL,IAFK,CAAb;;AAIA,oCAAsBJ,IAAtB;AACH;;;8CAEqB;AAClB,gBAAI,CAACK,MAAMC,OAAN,CAAc,KAAKzB,MAAL,CAAY0B,MAA1B,CAAD,IAAsC,KAAK1B,MAAL,CAAY0B,MAAZ,CAAmBf,MAAnB,KAA8B,CAAxE,EAA2E;AACvE,uBAAO,EAAP;AACH;;AAED,gBAAMgB,UAAU,KAAK3B,MAAL,CAAY0B,MAAZ,CAAmBL,GAAnB,CAAuB,UAACM,OAAD,EAAa;AAChD,uBAAOA,QAAQN,GAAR,CAAY,UAACC,MAAD,EAAY;AAC3B,2BAAOlB,sBAAYC,UAAZ,CAAuBiB,MAAvB,CAAP;AACH,iBAFM,CAAP;AAGH,aAJe,EAIbC,IAJa,CAIR,IAJQ,CAAhB;;AAMA,gCAAkBI,OAAlB;AACH;;;sDAE6B;AAC1B,gBAAMC,cAAc,KAAK5B,MAAL,CAAY4B,WAAZ,IAA2B,EAA/C;;AAEA,mBAAOC,OAAOV,IAAP,CAAYS,WAAZ,EAAyBP,GAAzB,CAA6B,UAACS,IAAD,EAAU;AAC1C,oBAAMR,SAASM,YAAYE,IAAZ,CAAf;AACA,oBAAMC,aAAa3B,sBAAYC,UAAZ,CAAuByB,IAAvB,CAAnB;AACA,oBAAME,SAAS5B,sBAAYC,UAAZ,CAAuBC,sBAAYC,sBAAZ,CAAmCe,OAAOU,MAA1C,CAAvB,CAAf;AACA,oBAAMC,eAAe7B,sBAAYC,UAAZ,CAAuBiB,OAAOU,MAAP,CAAcV,MAArC,CAArB;;AAEA,yCAAuBS,UAAvB,qBAAiDC,MAAjD,UAA4DC,YAA5D;AACH,aAPM,EAOJV,IAPI,CAOC,IAPD,CAAP;AAQH;;;+CAEsB;AACnB,iBAAKW,cAAL;AACA,gBAAM1B,aAAa,EAAnB;;AAEAA,uBAAW2B,IAAX,CAAgB,KAAKC,uBAAL,EAAhB;AACA5B,uBAAW2B,IAAX,CAAgB,KAAKE,2BAAL,EAAhB;AACA7B,uBAAW2B,IAAX,CAAgB,KAAKG,mBAAL,EAAhB;AACA9B,uBAAW2B,IAAX,CAAgB,KAAKI,2BAAL,EAAhB;;AAEA,gBAAMC,oBAAoB,KAAKC,wBAAL,CAA8BjC,UAA9B,CAA1B;;AAEA,gBAAMkC,sCAAoC,KAAKC,YAAL,EAApC,UAA4DH,kBAAkBjB,IAAlB,CAAuB,IAAvB,CAA5D,MAAN;;AAEA,mBAAO;AACHmB,wBADG;AAEHE,wBAAQ;AAFL,aAAP;AAIH;;;kDAEyB;AACtB,gBAAMF,gCAA8B,KAAKC,YAAL,EAApC;;AAEA,mBAAO;AACHD,wBADG;AAEHE,wBAAQ;AAFL,aAAP;AAIH;;;qDAQE;AAAA,gBALCd,IAKD,QALCA,IAKD;AAAA,gBAJCe,IAID,QAJCA,IAID;AAAA,gBAHCC,UAGD,QAHCA,UAGD;AAAA,gBAFCC,SAED,QAFCA,SAED;AAAA,gBADCC,YACD,QADCA,YACD;;;AAEC,gBAAMxC,aAAa,EAAnB;AACAA,uBAAW2B,IAAX,MAAmB/B,sBAAYC,UAAZ,CAAuByB,IAAvB,CAAnB;;AAEAtB,uBAAW2B,IAAX,CAAgBU,IAAhB;;AAEA,gBAAIC,UAAJ,EAAgB;AACZtC,2BAAW2B,IAAX,CAAgB,UAAhB;AACH;;AAED,gBAAIY,SAAJ,EAAe;AACXvC,2BAAW2B,IAAX,CAAgB,SAAhB;AACH;;AAED,gBAAIa,gBAAgB,IAApB,EAA0B;AACtBxC,2BAAW2B,IAAX,CAAgB,KAAKc,WAAL,CAAiBD,YAAjB,CAAhB;AACH;;AAED,mBAAOxC,WAAWe,IAAX,CAAgB,GAAhB,CAAP;AACH;;;kDAEyB;AAAA;;AACtB,mBAAO,KAAKvB,MAAL,CAAY2B,OAAZ,CAAoBN,GAApB,CAAwB,UAACC,MAAD,EAAY;AACvC,uBAAO,MAAK4B,sBAAL,CAA4B5B,MAA5B,CAAP;AACH,aAFM,EAEJC,IAFI,CAEC,IAFD,CAAP;AAGH;;;;;;kBAzHgBxB,qB","file":"SchemaToSqliteFactory.js","sourcesContent":["import jsonschema from \"jsonschema\";\nimport repositoryJsonSchema from \"../repositoryJsonSchema\";\nimport SchemaUtils from \"../utils/SchemaUtils\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\n\nexport default class SchemaToSqliteFactory {\n    constructor(schema) {\n        this.schema = schema;\n        this.validator = new jsonschema.Validator();\n    }\n\n    getTableName() {\n        return SqliteUtils.escapeName(SchemaUtils.getTableNameFromSchema(this.schema));\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    validateSchema() {\n        const validationResults = this.validator.validate(this.schema, repositoryJsonSchema);\n\n        if (validationResults.errors.length > 0) {\n            const error = new Error(\"Schema Error\");\n            error.validationErrors = validationResults.errors;\n            throw error;\n        }\n    }\n\n    createPrimaryKeysExpression() {\n        const keys = this.schema.primaryKeys.map((column) => {\n            return SqliteUtils.escapeName(column);\n        }).join(\", \");\n\n        return `PRIMARY KEY(${keys})`;\n    }\n\n    createUniqueColumns() {\n        if (!Array.isArray(this.schema.unique) || this.schema.unique.length === 0) {\n            return \"\";\n        }\n\n        const columns = this.schema.unique.map((columns) => {\n            return columns.map((column) => {\n                return SqliteUtils.escapeName(column);\n            });\n        }).join(\", \");\n\n        return `UNIQUE (${columns})`;\n    }\n\n    createForeignKeysExpression() {\n        const foreignKeys = this.schema.foreignKeys || {};\n\n        return Object.keys(foreignKeys).map((name) => {\n            const column = foreignKeys[name];\n            const columnName = SqliteUtils.escapeName(name);\n            const source = SqliteUtils.escapeName(SchemaUtils.getTableNameFromSchema(column.source));\n            const sourceColumn = SqliteUtils.escapeName(column.source.column);\n\n            return `FOREIGN KEY (${columnName}) REFERENCES ${source} (${sourceColumn})`;\n        }).join(\", \");\n    }\n\n    createTableStatement() {\n        this.validateSchema();\n        const expression = [];\n\n        expression.push(this.createColumnsExpression());\n        expression.push(this.createPrimaryKeysExpression());\n        expression.push(this.createUniqueColumns());\n        expression.push(this.createForeignKeysExpression());\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        const sql = `CREATE TABLE IF NOT EXISTS ${this.getTableName()} (${cleanedExpression.join(\", \")})`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createDropTableStatment() {\n        const sql = `DROP TABLE IF EXISTS ${this.getTableName()}`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createColumnExpression({\n        name,\n        type,\n        isRequired,\n        isIndexed,\n        defaultValue\n    }) {\n\n        const expression = [];\n        expression.push(`${SqliteUtils.escapeName(name)}`);\n\n        expression.push(type);\n\n        if (isRequired) {\n            expression.push(\"NOT NULL\");\n        }\n\n        if (isIndexed) {\n            expression.push(\"INDEXED\");\n        }\n\n        if (defaultValue != null) {\n            expression.push(this.sqlizeValue(defaultValue));\n        }\n\n        return expression.join(\" \");\n    }\n\n    createColumnsExpression() {\n        return this.schema.columns.map((column) => {\n            return this.createColumnExpression(column);\n        }).join(\", \");\n    }\n}"]}