{"version":3,"sources":["../../../src/sqlite/factories/EntityToSqlFactory.js"],"names":["EntityToSqlFactory","entity","tableName","primaryKeys","Array","isArray","length","Error","every","key","value","replace","toString","columns","map","sqlizeValue","join","keys","Object","values","placeHolderArray","fill","sql","validateEntityPrimaryKeys","sqliteData","reduce","accumulator","includes","placeHolderValues","push","whereStatement","createWhereStatement"],"mappings":"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","file":"EntityToSqlFactory.js","sourcesContent":["export default class EntityToSqlFactory {\n    constructor({\n        entity,\n        tableName,\n        primaryKeys\n    }) {\n        if (!Array.isArray(primaryKeys) || primaryKeys.length === 0) {\n            throw new Error(\"Invalid Argument Exception:'primaryKeys' needs to be an array of length greater than 0. \");\n        }\n\n        this.tableName = tableName;\n        this.entity = entity;\n        this.primaryKeys = primaryKeys;\n    }\n\n    validateEntityPrimaryKeys(entity) {\n        if (this.primaryKeys.length === 1) {\n            return entity[this.primaryKeys[0]] != null;\n        } else if (this.primaryKeys.length > 1) {\n            return this.primaryKeys.every((key) => {\n                return typeof entity[key] !== \"undefined\";\n            })\n        } else {\n            return false;\n        }\n    }\n\n    sqlizeValue(value) {\n        if (typeof value === \"string\") {\n            return `'${value.replace(/\\'/, \"''\")}'`;\n        } else {\n            return value.toString();\n        }\n    }\n\n    createWhereStatement(entity) {\n        const columns = this.primaryKeys.map((key) => {\n            return `\"${key}\" = ${this.sqlizeValue(entity[key])}`;\n        }).join(\", \");\n\n        return `WHERE ${columns}`;\n    }\n\n    createInsertStatement() {\n        const entity = this.entity;\n        const keys = Object.keys(entity);\n        const values = keys.map((key) => {\n            return entity[key];\n        });\n\n        const placeHolderArray = new Array(keys.length).fill(\"?\").join(\", \");\n\n        return {\n            sql: `INSERT INTO ${this.tableName} ( ${keys.join(\", \")} ) VALUES ( ${placeHolderArray} )`,\n            values: values\n        }\n\n    }\n\n    createUpdateStatement() {\n        const entity = this.entity;\n        const keys = Object.keys(entity);\n\n        if (!this.validateEntityPrimaryKeys(entity)) {\n            throw new Error(\"Cannot update entity: Invalid primary key(s).\");\n        }\n\n        const sqliteData = keys.reduce((accumulator, key) => {\n            if (this.primaryKeys.includes(key)) {\n                return accumulator;\n            }\n\n            accumulator.placeHolderValues.push(`${key} = ?`);\n            accumulator.values.push(entity[key]);\n            return accumulator;\n        }, { placeHolderValues: [], values: [] });\n\n        const whereStatement = this.createWhereStatement(entity);\n\n        return {\n            sql: `UPDATE ${this.tableName} SET ${sqliteData.placeHolderValues.join(\", \")} ${whereStatement}`,\n            values: sqliteData.values\n        }\n    }\n\n    createDeleteStatement() {\n        const entity = this.entity;\n\n        if (!this.validateEntityPrimaryKeys(entity)) {\n            throw new Error(\"Cannot delete entity: Invalid primary key(s).\");\n        }\n\n        const whereStatement = this.createWhereStatement(entity);\n\n        return {\n            sql: `DELETE FROM ${this.tableName} ${whereStatement}`,\n            values: []\n        }\n    }\n}"]}