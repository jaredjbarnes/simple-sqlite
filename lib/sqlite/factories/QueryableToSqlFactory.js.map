{"version":3,"sources":["../../../src/sqlite/factories/QueryableToSqlFactory.js"],"names":["QueryableToSqlFactory","queryable","Error","expression","filter","part","length","type","visitor","SqlVisitor","createWhereStatement","query","select","columns","Object","keys","map","key","join","orderBy","series","column","entity","statement","reduce","accumulator","placeHolderValues","push","values","sql","limit","offset","Infinity","selectSql","createSelectSql","whereSql","createWhereSql","orderBySql","createOrderBySql","limitAndOffsetSql","createLimitAndOffsetSql","cleanedExpression","removeNullOrEmptyStrings","createCountSelectSql","deleteSql","createDeleteSql","updateStatement","createUpdateSetStatement","whereStatement"],"mappings":"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","file":"QueryableToSqlFactory.js","sourcesContent":["import SqlVisitor from \"../visitors/SqlVisitor\";\n\nexport default class QueryableToSqlFactory {\n    constructor({\n        queryable = null\n    }) {\n\n        if (queryable == null) {\n            throw new Error(\"Null Exception: A queryable is needed to create statement.\");\n        }\n\n        this.queryable = queryable;\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    createDeleteSql() {\n        return `DELETE FROM ${this.queryable.type}`;\n    }\n\n    createWhereSql() {\n        const visitor = new SqlVisitor();\n        return visitor.createWhereStatement(this.queryable.query.expression);\n    }\n\n    createSelectSql() {\n        const select = this.queryable.query.select;\n        let columns = Object.keys(select).map((key) => {\n            return `${key} AS ${select[key]}`;\n        });\n\n        if (columns.length === 0) {\n            columns = [\"*\"];\n        }\n\n        return `SELECT ${columns.join(\", \")} FROM ${this.queryable.type}`;\n    }\n\n    createOrderBySql() {\n        if (this.queryable.query.orderBy.length === 0) {\n            return \"\";\n        }\n\n        const series = this.queryable.query.orderBy.map((orderBy) => {\n            return `${orderBy.column} ${orderBy.type}`;\n        }).join(\", \");\n\n        return `ORDER BY ${series}`;\n    }\n\n    createUpdateSetStatement(entity) {\n        const keys = Object.keys(entity);\n\n        const statement = keys.reduce((accumulator, key) => {\n            if (key === \"id\") {\n                return accumulator;\n            }\n\n            accumulator.placeHolderValues.push(`${key} = ?`);\n            accumulator.values.push(entity[key]);\n            return accumulator;\n        }, { placeHolderValues: [], values: [] });\n\n        return {\n            sql: `UPDATE ${this.queryable.type} SET ${statement.placeHolderValues.join(\", \")}`,\n            values: statement.values\n        }\n\n    }\n\n    createCountSelectSql() {\n        return `SELECT count(*) FROM ${this.queryable.type}`;\n    }\n\n    createLimitAndOffsetSql() {\n        let limit = this.queryable.query.limit;\n        let offset = this.queryable.query.offset;\n\n        if (limit === Infinity) {\n            limit = -1;\n        }\n\n        return `LIMIT ${limit} OFFSET ${offset}`;\n    }\n\n    createWhereStatement() {\n        const selectSql = this.createSelectSql();\n        const whereSql = this.createWhereSql();\n        const orderBySql = this.createOrderBySql();\n        const limitAndOffsetSql = this.createLimitAndOffsetSql();\n        const expression = [];\n\n        expression.push(selectSql);\n\n        if (whereSql != \"\") {\n            expression.push(whereSql);\n        }\n\n        if (orderBySql != \"\") {\n            expression.push(orderBySql);\n        }\n\n        if (limitAndOffsetSql != \"\") {\n            expression.push(limitAndOffsetSql);\n        }\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        return {\n            sql: cleanedExpression.join(\" \"),\n            values: []\n        }\n    }\n\n    createCountStatement() {\n        const selectSql = this.createCountSelectSql();\n        const whereSql = this.createWhereSql();\n        const expression = []\n\n        expression.push(selectSql);\n\n        if (whereSql != \"\") {\n            expression.push(whereSql);\n        }\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        return {\n            sql: cleanedExpression.join(\" \"),\n            values: []\n        }\n    }\n\n    createDeleteStatement() {\n        const deleteSql = this.createDeleteSql();\n        const whereSql = this.createWhereSql();\n\n        let sql = deleteSql;\n\n        if (whereSql != \"\") {\n            sql = `${sql} ${whereSql}`;\n        }\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createUpdateStatement(entity) {\n        const updateStatement = this.createUpdateSetStatement(entity);\n        const whereStatement = this.createWhereSql();\n\n        let sql = updateStatement.sql;\n\n        if (whereStatement != \"\") {\n            sql = `${sql} ${whereStatement}`;\n        }\n\n        return {\n            sql,\n            values: updateStatement.values\n        }\n    }\n}"]}