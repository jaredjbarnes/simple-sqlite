{"version":3,"sources":["../../src/sqlite/Repository.js"],"names":["Repository","database","name","primaryKeys","sqliteDatabaseWrapper","Sqlite3Wrapper","entity","insertStatementCreator","InsertStatementCreator","tableName","createStatement","sql","values","runAsync","deleteStatementCreator","DeleteStatementCreator","updateStatementCreator","UpdateStatementCreator","Provider","provider","getQueryProvider","Queryable","type"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,U;AACjB,8BAAsD;AAAA,YAAxCC,QAAwC,QAAxCA,QAAwC;AAAA,YAA9BC,IAA8B,QAA9BA,IAA8B;AAAA,oCAAxBC,WAAwB;AAAA,YAAxBA,WAAwB,oCAAV,CAAC,IAAD,CAAU;;AAAA;;AAClD,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKG,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmB,KAAKJ,QAAxB,CAA7B;AACA,aAAKE,WAAL,GAAmBA,WAAnB;AACH;;;;iCAEQG,M,EAAQ;;AAEb,gBAAMC,yBAAyB,IAAIC,gCAAJ,CAA2B;AACtDC,2BAAW,KAAKP,IADsC;AAEtDI,8BAFsD;AAGtDH,6BAAa,KAAKA;AAHoC,aAA3B,CAA/B;;AAFa,wCAQWI,uBAAuBG,eAAvB,EARX;AAAA,gBAQLC,GARK,yBAQLA,GARK;AAAA,gBAQAC,MARA,yBAQAA,MARA;;AAUb,mBAAO,KAAKR,qBAAL,CAA2BS,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AAEH;;;oCAEWN,M,EAAQ;AAChB,gBAAMQ,yBAAyB,IAAIC,gCAAJ,CAA2B;AACtDN,2BAAW,KAAKP,IADsC;AAEtDI,8BAFsD;AAGtDH,6BAAa,KAAKA;AAHoC,aAA3B,CAA/B;;AADgB,wCAOQW,uBAAuBJ,eAAvB,EAPR;AAAA,gBAORC,GAPQ,yBAORA,GAPQ;AAAA,gBAOHC,MAPG,yBAOHA,MAPG;;AAShB,mBAAO,KAAKR,qBAAL,CAA2BS,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AACH;;;oCAEWN,M,EAAQ;;AAEhB,gBAAMU,yBAAyB,IAAIC,gCAAJ,CAA2B;AACtDR,2BAAW,KAAKP,IADsC;AAEtDI,8BAFsD;AAGtDH,6BAAa,KAAKA;AAHoC,aAA3B,CAA/B;;AAFgB,wCAQQa,uBAAuBN,eAAvB,EARR;AAAA,gBAQRC,GARQ,yBAQRA,GARQ;AAAA,gBAQHC,MARG,yBAQHA,MARG;;AAUhB,mBAAO,KAAKR,qBAAL,CAA2BS,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AAEH;;;2CAEkB;AACf,mBAAO,IAAIM,kBAAJ,CAAa;AAChBjB,0BAAU,KAAKA;AADC,aAAb,CAAP;AAGH;;;gCAEO;AACJ,gBAAMkB,WAAW,KAAKC,gBAAL,EAAjB;;AAEA,mBAAO,IAAIC,mBAAJ,CAAc;AACjBC,sBAAM,KAAKpB,IADM;AAEjBiB,0BAAUA;AAFO,aAAd,CAAP;AAIH;;;;;;kBA7DgBnB,U","file":"Repository.js","sourcesContent":["import Provider from \"./Provider\";\nimport Queryable from \"../queryable/Queryable\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport InsertStatementCreator from \"./statements/InsertStatementCreator\";\nimport UpdateStatementCreator from \"./statements/UpdateStatementCreator\";\nimport DeleteStatementCreator from \"./statements/DeleteStatementCreator\";\n\nexport default class Repository {\n    constructor({ database, name, primaryKeys = [\"id\"] }) {\n        this.name = name;\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n        this.primaryKeys = primaryKeys;\n    }\n\n    addAsync(entity) {\n\n        const insertStatementCreator = new InsertStatementCreator({\n            tableName: this.name,\n            entity,\n            primaryKeys: this.primaryKeys\n        });\n\n        const { sql, values } = insertStatementCreator.createStatement();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n\n    }\n\n    removeAsync(entity) {\n        const deleteStatementCreator = new DeleteStatementCreator({\n            tableName: this.name,\n            entity,\n            primaryKeys: this.primaryKeys\n        });\n\n        const { sql, values } = deleteStatementCreator.createStatement();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n    updateAsync(entity) {\n\n        const updateStatementCreator = new UpdateStatementCreator({\n            tableName: this.name,\n            entity,\n            primaryKeys: this.primaryKeys\n        });\n\n        const { sql, values } = updateStatementCreator.createStatement();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n\n    }\n\n    getQueryProvider() {\n        return new Provider({\n            database: this.database\n        });\n    }\n\n    where() {\n        const provider = this.getQueryProvider();\n\n        return new Queryable({\n            type: this.name,\n            provider: provider\n        });\n    }\n\n}"]}