{"version":3,"sources":["../../src/sqlite/Repository.js"],"names":["Repository","database","schema","name","SchemaUtils","getTableNameFromSchema","sqliteDatabaseWrapper","Sqlite3Wrapper","primaryKeys","entity","InsertStatementCreator","createStatement","tableName","sql","values","runAsync","DeleteStatementCreator","UpdateStatementCreator","Provider","provider","getQueryProvider","Queryable","type"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,U;AACjB,8BAAkC;AAAA,YAApBC,QAAoB,QAApBA,QAAoB;AAAA,YAAVC,MAAU,QAAVA,MAAU;;AAAA;;AAC9B,aAAKC,IAAL,GAAYC,sBAAYC,sBAAZ,CAAmCH,MAAnC,CAAZ;AACA,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKK,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmB,KAAKN,QAAxB,CAA7B;AACA,aAAKO,WAAL,GAAmBN,OAAOM,WAA1B;AACH;;;;iCAEQC,M,EAAQ;AAAA,wCACWC,iCAAuBC,eAAvB,CAAuC;AAC3DC,2BAAW,KAAKT,IAD2C;AAE3DM,8BAF2D;AAG3DD,6BAAa,KAAKA;AAHyC,aAAvC,CADX;AAAA,gBACLK,GADK,yBACLA,GADK;AAAA,gBACAC,MADA,yBACAA,MADA;;AAOb,mBAAO,KAAKR,qBAAL,CAA2BS,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AACH;;;oCAEWL,M,EAAQ;AAAA,wCACQO,iCAAuBL,eAAvB,CAAuC;AAC3DC,2BAAW,KAAKT,IAD2C;AAE3DM,8BAF2D;AAG3DD,6BAAa,KAAKA;AAHyC,aAAvC,CADR;AAAA,gBACRK,GADQ,yBACRA,GADQ;AAAA,gBACHC,MADG,yBACHA,MADG;;AAOhB,mBAAO,KAAKR,qBAAL,CAA2BS,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AACH;;;oCAEWL,M,EAAQ;AAAA,wCAEQQ,iCAAuBN,eAAvB,CAAuC;AAC3DC,2BAAW,KAAKT,IAD2C;AAE3DM,8BAF2D;AAG3DD,6BAAa,KAAKA;AAHyC,aAAvC,CAFR;AAAA,gBAERK,GAFQ,yBAERA,GAFQ;AAAA,gBAEHC,MAFG,yBAEHA,MAFG;;AAQhB,mBAAO,KAAKR,qBAAL,CAA2BS,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AAEH;;;2CAEkB;AACf,mBAAO,IAAII,kBAAJ,CAAa;AAChBjB,0BAAU,KAAKA;AADC,aAAb,CAAP;AAGH;;;gCAEO;AACJ,gBAAMkB,WAAW,KAAKC,gBAAL,EAAjB;;AAEA,mBAAO,IAAIC,mBAAJ,CAAc;AACjBC,sBAAM,KAAKnB,IADM;AAEjBgB,0BAAUA;AAFO,aAAd,CAAP;AAIH;;;;;;kBArDgBnB,U","file":"Repository.js","sourcesContent":["import Provider from \"./Provider\";\nimport Queryable from \"../queryable/Queryable\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport InsertStatementCreator from \"./statements/InsertStatementCreator\";\nimport UpdateStatementCreator from \"./statements/UpdateStatementCreator\";\nimport DeleteStatementCreator from \"./statements/DeleteStatementCreator\";\nimport SchemaUtils from \"./utils/SchemaUtils\";\n\nexport default class Repository {\n    constructor({ database, schema }) {\n        this.name = SchemaUtils.getTableNameFromSchema(schema);\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n        this.primaryKeys = schema.primaryKeys;\n    }\n\n    addAsync(entity) {\n        const { sql, values } = InsertStatementCreator.createStatement({\n            tableName: this.name,\n            entity,\n            primaryKeys: this.primaryKeys\n        });\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n    removeAsync(entity) {\n        const { sql, values } = DeleteStatementCreator.createStatement({\n            tableName: this.name,\n            entity,\n            primaryKeys: this.primaryKeys\n        });\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n    updateAsync(entity) {\n\n        const { sql, values } = UpdateStatementCreator.createStatement({\n            tableName: this.name,\n            entity,\n            primaryKeys: this.primaryKeys\n        });\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n\n    }\n\n    getQueryProvider() {\n        return new Provider({\n            database: this.database\n        });\n    }\n\n    where() {\n        const provider = this.getQueryProvider();\n\n        return new Queryable({\n            type: this.name,\n            provider: provider\n        });\n    }\n\n}"]}