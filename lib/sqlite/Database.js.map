{"version":3,"sources":["../../src/sqlite/Database.js"],"names":["Database","database","schemas","sqliteDatabaseWrapper","Sqlite3Wrapper","Array","isArray","schema","getSchema","index","findIndex","name","innerSchema","version","splice","find","tableCreator","SqliteTableCreator","createRepositoryIfNotExistsAsync","then","hasSchema","push","dropRepositoryIfExistsAsync","removeSchema","Error","tableName","SchemaUtils","getTableNameFromSchema","primaryKeys","getPrimaryKeysFromSchema","Repository"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Q;AACjB,4BAGG;AAAA,YAFCC,QAED,QAFCA,QAED;AAAA,YADCC,OACD,QADCA,OACD;;AAAA;;AACC,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKE,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmBH,QAAnB,CAA7B;AACA,aAAKC,OAAL,GAAeG,MAAMC,OAAN,CAAcJ,OAAd,IAAyBA,OAAzB,GAAmC,EAAlD;AACH;;;;kCAESK,M,EAAQ;AACd,mBAAO,KAAKC,SAAL,CAAeD,MAAf,KAA0B,IAAjC;AACH;;;qCAEYA,M,EAAQ;AACjB,gBAAME,QAAQ,KAAKP,OAAL,CAAaQ,SAAb,CAAuB,YAAM;AACvC,uBAAOH,OAAOI,IAAP,IAAeC,WAAf,IAA8BL,OAAOM,OAAP,IAAkBD,YAAYC,OAAnE;AACH,aAFa,CAAd;;AAIA,gBAAIJ,QAAQ,CAAC,CAAb,EAAgB;AACZ,qBAAKP,OAAL,CAAaY,MAAb,CAAoBL,KAApB,EAA2B,CAA3B;AACH;AACJ;;;kCAESF,M,EAAQ;AACd,mBAAO,KAAKL,OAAL,CAAaa,IAAb,CAAkB,UAACH,WAAD,EAAiB;AACtC,uBAAOL,OAAOI,IAAP,IAAeC,YAAYD,IAA3B,IAAmCJ,OAAOM,OAAP,IAAkBD,YAAYC,OAAxE;AACH,aAFM,CAAP;AAGH;;;2CAEkBN,M,EAAQ;AAAA;;AACvB,gBAAMS,eAAe,IAAIC,sBAAJ,CAAuB;AACxChB,0BAAU,KAAKA,QADyB;AAExCM;AAFwC,aAAvB,CAArB;;AAKA,mBAAOS,aAAaE,gCAAb,GAAgDC,IAAhD,CAAqD,YAAM;AAC9D,oBAAI,CAAC,MAAKC,SAAL,CAAeb,MAAf,CAAL,EAA6B;AACzB,0BAAKL,OAAL,CAAamB,IAAb,CAAkBd,MAAlB;AACH;AACJ,aAJM,CAAP;AAKH;;;8CAEqBA,M,EAAQ;AAAA;;AAC1B,mBAAOS,aAAaM,2BAAb,GAA2CH,IAA3C,CAAgD,YAAM;AACzD,uBAAKI,YAAL,CAAkBhB,MAAlB;AACH,aAFM,CAAP;AAGH;;;sCAEaI,I,EAAME,O,EAAS;AACzB,gBAAMN,SAAS,KAAKC,SAAL,CAAe,EAAEG,UAAF,EAAQE,gBAAR,EAAf,CAAf;;AAEA,gBAAIN,UAAU,IAAd,EAAoB;AAChB,sBAAM,IAAIiB,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAED,gBAAMC,YAAYC,sBAAYC,sBAAZ,CAAmCpB,MAAnC,CAAlB;AACA,gBAAMqB,cAAcF,sBAAYG,wBAAZ,CAAqCtB,MAArC,CAApB;AACA,gBAAMN,WAAW,KAAKA,QAAtB;;AAEA,mBAAO,IAAI6B,oBAAJ,CAAe;AAClB7B,0BAAUA,QADQ;AAElBU,sBAAMc,SAFY;AAGlBG;AAHkB,aAAf,CAAP;AAMH;;;;;;kBAlEgB5B,Q","file":"Database.js","sourcesContent":["import Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport SqliteTableCreator from \"./TableCreator\";\nimport Repository from \"./Repository\";\nimport SchemaUtils from \"./utils/SchemaUtils\";\n\nexport default class Database {\n    constructor({\n        database,\n        schemas\n    }) {\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(database);\n        this.schemas = Array.isArray(schemas) ? schemas : [];\n    }\n\n    hasSchema(schema) {\n        return this.getSchema(schema) != null;\n    }\n\n    removeSchema(schema) {\n        const index = this.schemas.findIndex(() => {\n            return schema.name == innerSchema && schema.version == innerSchema.version;\n        });\n\n        if (index > -1) {\n            this.schemas.splice(index, 1);\n        }\n    }\n\n    getSchema(schema) {\n        return this.schemas.find((innerSchema) => {\n            return schema.name == innerSchema.name && schema.version == innerSchema.version;\n        });\n    }\n\n    addRepositoryAsync(schema) {\n        const tableCreator = new SqliteTableCreator({\n            database: this.database,\n            schema\n        });\n\n        return tableCreator.createRepositoryIfNotExistsAsync().then(() => {\n            if (!this.hasSchema(schema)) {\n                this.schemas.push(schema);\n            }\n        });\n    }\n\n    removeRepositoryAsync(schema) {\n        return tableCreator.dropRepositoryIfExistsAsync().then(() => {\n            this.removeSchema(schema)\n        });\n    }\n\n    getRepository(name, version) {\n        const schema = this.getSchema({ name, version });\n\n        if (schema == null) {\n            throw new Error(\"Unable to find repository.\");\n        }\n\n        const tableName = SchemaUtils.getTableNameFromSchema(schema);\n        const primaryKeys = SchemaUtils.getPrimaryKeysFromSchema(schema);\n        const database = this.database;\n\n        return new Repository({\n            database: database,\n            name: tableName,\n            primaryKeys\n        });\n\n    }\n\n}"]}