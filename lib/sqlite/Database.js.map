{"version":3,"sources":["../../src/sqlite/Database.js"],"names":["Database","constructor","database","schemas","Array","isArray","hasSchemaWithName","name","getSchemaByName","find","innerSchema","removeSchemaByName","index","findIndex","splice","getSchemas","slice","addSchema","schema","push","removeSchema","createTableFromSchemaAsync","TableCreator","createTableIfNotExistsAsync","createTablesFromSchemasAsync","reduce","promise","then","Promise","resolve","dropTableFromSchemaAsync","dropTableIfExistsAsync","getTable","lifeCycleDelegate","Error","Table"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,QAAN,CAAe;AAC1BC,EAAAA,WAAW,CAAC;AACRC,IAAAA,QADQ;AAERC,IAAAA;AAFQ,GAAD,EAGR;AACC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeC,KAAK,CAACC,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,GAAmC,EAAlD;AACH;;AAEDG,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,WAAO,KAAKC,eAAL,CAAqBD,IAArB,KAA8B,IAArC;AACH;;AAEDC,EAAAA,eAAe,CAACD,IAAD,EAAO;AAClB,WAAO,KAAKJ,OAAL,CAAaM,IAAb,CAAmBC,WAAD,IAAiB;AACtC,aAAOH,IAAI,IAAIG,WAAW,CAACH,IAA3B;AACH,KAFM,CAAP;AAGH;;AAEDI,EAAAA,kBAAkB,CAACJ,IAAD,EAAO;AACrB,UAAMK,KAAK,GAAG,KAAKT,OAAL,CAAaU,SAAb,CAAuB,MAAM;AACvC,aAAON,IAAI,IAAIG,WAAf;AACH,KAFa,CAAd;;AAIA,QAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKT,OAAL,CAAaW,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACH;AACJ;;AAEDG,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKZ,OAAL,CAAaa,KAAb,CAAmB,CAAnB,CAAP;AACH;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,SAAKf,OAAL,CAAagB,IAAb,CAAkBD,MAAlB;AACH;;AAEDE,EAAAA,YAAY,CAACF,MAAD,EAAS;AACjB,SAAKP,kBAAL,CAAwBO,MAAM,CAACX,IAA/B;AACH;;AAED,QAAMc,0BAAN,CAAiCH,MAAjC,EAAyC;AACrC,WAAO,MAAMI,sBAAaC,2BAAb,CAAyC;AAClDrB,MAAAA,QAAQ,EAAE,KAAKA,QADmC;AAElDgB,MAAAA;AAFkD,KAAzC,CAAb;AAIH;;AAED,QAAMM,4BAAN,GAAqC;AACjC,WAAO,MAAM,KAAKrB,OAAL,CAAasB,MAAb,CAAoB,CAACC,OAAD,EAAUR,MAAV,KAAqB;AAClD,aAAOQ,OAAO,CAACC,IAAR,CAAa,MAAM;AACtB,eAAO,KAAKN,0BAAL,CAAgCH,MAAhC,CAAP;AACH,OAFM,CAAP;AAGH,KAJY,EAIVU,OAAO,CAACC,OAAR,EAJU,CAAb;AAKH;;AAED,QAAMC,wBAAN,CAA+BZ,MAA/B,EAAuC;AACnC,WAAO,MAAMI,sBAAaS,sBAAb,CAAoC;AAC7C7B,MAAAA,QAAQ,EAAE,KAAKA,QAD8B;AAE7CgB,MAAAA;AAF6C,KAApC,CAAb;AAIH;;AAEDc,EAAAA,QAAQ,CAACzB,IAAD,EAAO0B,iBAAP,EAA0B;AAC9B,UAAMf,MAAM,GAAG,KAAKV,eAAL,CAAqBD,IAArB,CAAf;;AAEA,QAAIW,MAAM,IAAI,IAAd,EAAoB;AAChB,YAAM,IAAIgB,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,UAAMhC,QAAQ,GAAG,KAAKA,QAAtB;AAEA,WAAO,IAAIiC,cAAJ,CAAU;AACbjC,MAAAA,QAAQ,EAAEA,QADG;AAEbgB,MAAAA,MAFa;AAGbe,MAAAA;AAHa,KAAV,CAAP;AAMH;;AA9EyB","sourcesContent":["import Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport TableCreator from \"./TableCreator\";\nimport Table from \"./Table\";\n\nexport default class Database {\n    constructor({\n        database,\n        schemas\n    }) {\n        this.database = database;\n        this.schemas = Array.isArray(schemas) ? schemas : [];\n    }\n\n    hasSchemaWithName(name) {\n        return this.getSchemaByName(name) != null;\n    }\n\n    getSchemaByName(name) {\n        return this.schemas.find((innerSchema) => {\n            return name == innerSchema.name;\n        });\n    }\n\n    removeSchemaByName(name) {\n        const index = this.schemas.findIndex(() => {\n            return name == innerSchema;\n        });\n\n        if (index > -1) {\n            this.schemas.splice(index, 1);\n        }\n    }\n\n    getSchemas() {\n        return this.schemas.slice(0);\n    }\n\n    addSchema(schema) {\n        this.schemas.push(schema);\n    }\n\n    removeSchema(schema) {\n        this.removeSchemaByName(schema.name);\n    }\n\n    async createTableFromSchemaAsync(schema) {\n        return await TableCreator.createTableIfNotExistsAsync({\n            database: this.database,\n            schema\n        });\n    }\n\n    async createTablesFromSchemasAsync() {\n        return await this.schemas.reduce((promise, schema) => {\n            return promise.then(() => {\n                return this.createTableFromSchemaAsync(schema);\n            })\n        }, Promise.resolve());\n    }\n\n    async dropTableFromSchemaAsync(schema) {\n        return await TableCreator.dropTableIfExistsAsync({\n            database: this.database,\n            schema\n        });\n    }\n\n    getTable(name, lifeCycleDelegate) {\n        const schema = this.getSchemaByName(name);\n\n        if (schema == null) {\n            throw new Error(\"Unable to find table.\");\n        }\n\n        const database = this.database;\n\n        return new Table({\n            database: database,\n            schema,\n            lifeCycleDelegate\n        });\n\n    }\n\n}"],"file":"Database.js"}