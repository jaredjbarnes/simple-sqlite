{"version":3,"sources":["../../src/sqlite/Database.js"],"names":["Database","database","schemas","sqliteDatabaseWrapper","Sqlite3Wrapper","Array","isArray","schema","getSchema","index","findIndex","name","innerSchema","version","splice","find","slice","push","removeSchema","TableCreator","createTableIfNotExistsAsync","reduce","promise","then","createTableFromSchemaAsync","Promise","resolve","dropTableIfExistsAsync","Error","Repository"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Q;AACjB,4BAGG;AAAA,YAFCC,QAED,QAFCA,QAED;AAAA,YADCC,OACD,QADCA,OACD;;AAAA;;AACC,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKE,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmBH,QAAnB,CAA7B;AACA,aAAKC,OAAL,GAAeG,MAAMC,OAAN,CAAcJ,OAAd,IAAyBA,OAAzB,GAAmC,EAAlD;AACH;;;;kCAESK,M,EAAQ;AACd,mBAAO,KAAKC,SAAL,CAAeD,MAAf,KAA0B,IAAjC;AACH;;;qCAEYA,M,EAAQ;AACjB,gBAAME,QAAQ,KAAKP,OAAL,CAAaQ,SAAb,CAAuB,YAAM;AACvC,uBAAOH,OAAOI,IAAP,IAAeC,WAAf,IAA8BL,OAAOM,OAAP,IAAkBD,YAAYC,OAAnE;AACH,aAFa,CAAd;;AAIA,gBAAIJ,QAAQ,CAAC,CAAb,EAAgB;AACZ,qBAAKP,OAAL,CAAaY,MAAb,CAAoBL,KAApB,EAA2B,CAA3B;AACH;AACJ;;;kCAESF,M,EAAQ;AACd,mBAAO,KAAKL,OAAL,CAAaa,IAAb,CAAkB,UAACH,WAAD,EAAiB;AACtC,uBAAOL,OAAOI,IAAP,IAAeC,YAAYD,IAA3B,IAAmCJ,OAAOM,OAAP,IAAkBD,YAAYC,OAAxE;AACH,aAFM,CAAP;AAGH;;;qCAEW;AACR,mBAAO,KAAKX,OAAL,CAAac,KAAb,CAAmB,CAAnB,CAAP;AACH;;;kCAEST,M,EAAQ;AACd,iBAAKL,OAAL,CAAae,IAAb,CAAkBV,MAAlB;AACH;;;oCAEWA,M,EAAQ;AAChB,iBAAKW,YAAL,CAAkBX,MAAlB;AACH;;;mDAE0BA,M,EAAQ;AAC/B,mBAAOY,uBAAaC,2BAAb,CAAyC;AAC5CnB,0BAAU,KAAKA,QAD6B;AAE5CM;AAF4C,aAAzC,CAAP;AAIH;;;uDAE8B;AAAA;;AAC3B,mBAAO,KAAKL,OAAL,CAAamB,MAAb,CAAoB,UAACC,OAAD,EAAUf,MAAV,EAAqB;AAC5C,uBAAOe,QAAQC,IAAR,CAAa,YAAI;AACpB,2BAAO,MAAKC,0BAAL,CAAgCjB,MAAhC,CAAP;AACH,iBAFM,CAAP;AAGH,aAJM,EAIJkB,QAAQC,OAAR,EAJI,CAAP;AAKH;;;iDAEwBnB,M,EAAQ;AAC7B,mBAAOY,uBAAaQ,sBAAb,CAAoC;AACvC1B,0BAAU,KAAKA,QADwB;AAEvCM;AAFuC,aAApC,CAAP;AAIH;;;sCAEaI,I,EAAME,O,EAAS;AACzB,gBAAMN,SAAS,KAAKC,SAAL,CAAe,EAAEG,UAAF,EAAQE,gBAAR,EAAf,CAAf;;AAEA,gBAAIN,UAAU,IAAd,EAAoB;AAChB,sBAAM,IAAIqB,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAED,gBAAM3B,WAAW,KAAKA,QAAtB;;AAEA,mBAAO,IAAI4B,oBAAJ,CAAe;AAClB5B,0BAAUA,QADQ;AAElBM;AAFkB,aAAf,CAAP;AAKH;;;;;;kBA9EgBP,Q","file":"Database.js","sourcesContent":["import Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport TableCreator from \"./TableCreator\";\nimport Repository from \"./Repository\";\n\nexport default class Database {\n    constructor({\n        database,\n        schemas\n    }) {\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(database);\n        this.schemas = Array.isArray(schemas) ? schemas : [];\n    }\n\n    hasSchema(schema) {\n        return this.getSchema(schema) != null;\n    }\n\n    removeSchema(schema) {\n        const index = this.schemas.findIndex(() => {\n            return schema.name == innerSchema && schema.version == innerSchema.version;\n        });\n\n        if (index > -1) {\n            this.schemas.splice(index, 1);\n        }\n    }\n\n    getSchema(schema) {\n        return this.schemas.find((innerSchema) => {\n            return schema.name == innerSchema.name && schema.version == innerSchema.version;\n        });\n    }\n\n    getSchemas(){\n        return this.schemas.slice(0);\n    }\n\n    addSchema(schema) {\n        this.schemas.push(schema);\n    }\n\n    removeAsync(schema) {\n        this.removeSchema(schema);\n    }\n\n    createTableFromSchemaAsync(schema) {\n        return TableCreator.createTableIfNotExistsAsync({\n            database: this.database,\n            schema\n        });\n    }\n\n    createTablesFromSchemasAsync() {\n        return this.schemas.reduce((promise, schema) => {\n            return promise.then(()=>{\n                return this.createTableFromSchemaAsync(schema);\n            })\n        }, Promise.resolve());\n    }\n\n    dropTableFromSchemaAsync(schema) {\n        return TableCreator.dropTableIfExistsAsync({\n            database: this.database,\n            schema\n        });\n    }\n\n    getRepository(name, version) {\n        const schema = this.getSchema({ name, version });\n\n        if (schema == null) {\n            throw new Error(\"Unable to find repository.\");\n        }\n\n        const database = this.database;\n\n        return new Repository({\n            database: database,\n            schema\n        });\n\n    }\n\n}"]}