{"version":3,"sources":["../../src/sqlite/SqliteDatabase.js"],"names":["SqliteDatabase","database","sqliteDatabaseWrapper","Sqlite3Wrapper","schemas","schema","findSchema","index","findIndex","name","innerSchema","version","splice","find","schemaToSqlite","SchemaToSqlite","createRepositoryIfNotExistsAsync","then","hasSchema","push","dropRepositoryIfExistsAsync","removeSchema","getSchema","Error","schemaUtils","SchemaUtils","tableName","getTableName","primaryKeys","getPrimaryKeys","Repository"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,c;AACjB,kCAEG;AAAA,YADCC,QACD,QADCA,QACD;;AAAA;;AACC,aAAKA,QAAL,GAAgBA,QAAhB;AACA,aAAKC,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmBF,QAAnB,CAA7B;AACA,aAAKG,OAAL,GAAeA,OAAf;AACH;;;;kCAESC,M,EAAQ;AACd,mBAAO,KAAKC,UAAL,CAAgBD,MAAhB,KAA2B,IAAlC;AACH;;;qCAEYA,M,EAAQ;AACjB,gBAAME,QAAQ,KAAKH,OAAL,CAAaI,SAAb,CAAuB,YAAM;AACvC,uBAAOH,OAAOI,IAAP,IAAeC,WAAf,IAA8BL,OAAOM,OAAP,IAAkBD,YAAYC,OAAnE;AACH,aAFa,CAAd;;AAIA,gBAAIJ,QAAQ,CAAC,CAAb,EAAgB;AACZ,qBAAKH,OAAL,CAAaQ,MAAb,CAAoBL,KAApB,EAA2B,CAA3B;AACH;AACJ;;;kCAESF,M,EAAQ;AACd,mBAAO,KAAKD,OAAL,CAAaS,IAAb,CAAkB,UAACH,WAAD,EAAiB;AACtC,uBAAOL,OAAOI,IAAP,IAAeC,WAAf,IAA8BL,OAAOM,OAAP,IAAkBD,YAAYC,OAAnE;AACH,aAFM,CAAP;AAGH;;;0DAEiCN,M,EAAQ;AAAA;;AACtC,gBAAMS,iBAAiB,IAAIC,+BAAJ,CAAmB;AACtCd,0BAAU,KAAKA,QADuB;AAEtCI;AAFsC,aAAnB,CAAvB;;AAKA,mBAAOS,eAAeE,gCAAf,GAAkDC,IAAlD,CAAuD,YAAM;AAChE,oBAAI,CAAC,MAAKC,SAAL,CAAeb,MAAf,CAAL,EAA6B;AACzB,0BAAKD,OAAL,CAAae,IAAb,CAAkBd,MAAlB;AACH;AACJ,aAJM,CAAP;AAKH;;;sDAE6BA,M,EAAQ;AAAA;;AAClC,mBAAOS,eAAeM,2BAAf,GAA6CH,IAA7C,CAAkD,YAAM;AAC3D,uBAAKI,YAAL,CAAkBhB,MAAlB;AACH,aAFM,CAAP;AAGH;;;sCAEaI,I,EAAME,O,EAAS;AACzB,gBAAMN,SAAS,KAAKiB,SAAL,CAAe,EAAEb,UAAF,EAAQE,gBAAR,EAAf,CAAf;;AAEA,gBAAIN,UAAU,IAAd,EAAoB;AAChB,sBAAM,IAAIkB,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAED,gBAAMC,cAAc,IAAIC,qBAAJ,CAAgBpB,MAAhB,CAApB;AACA,gBAAMqB,YAAYF,YAAYG,YAAZ,EAAlB;AACA,gBAAMC,cAAcJ,YAAYK,cAAZ,EAApB;AACA,gBAAM5B,WAAW,KAAKA,QAAtB;;AAEA,mBAAO,IAAI6B,oBAAJ,CAAe;AAClB7B,0BAAUA,QADQ;AAElBQ,sBAAMiB,SAFY;AAGlBE;AAHkB,aAAf,CAAP;AAMH;;;;;;kBAlEgB5B,c","file":"SqliteDatabase.js","sourcesContent":["import Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport SchemaToSqlite from \"./SqliteDatabaseCreator\";\nimport Repository from \"./Repository\";\nimport SchemaUtils from \"./utils/SchemaUtils\";\n\nexport default class SqliteDatabase {\n    constructor({\n        database\n    }) {\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(database);\n        this.schemas = schemas;\n    }\n\n    hasSchema(schema) {\n        return this.findSchema(schema) != null;\n    }\n\n    removeSchema(schema) {\n        const index = this.schemas.findIndex(() => {\n            return schema.name == innerSchema && schema.version == innerSchema.version;\n        });\n\n        if (index > -1) {\n            this.schemas.splice(index, 1);\n        }\n    }\n\n    getSchema(schema) {\n        return this.schemas.find((innerSchema) => {\n            return schema.name == innerSchema && schema.version == innerSchema.version;\n        });\n    }\n\n    addRepositoryIfDoesNotExistsAsync(schema) {\n        const schemaToSqlite = new SchemaToSqlite({\n            database: this.database,\n            schema\n        });\n\n        return schemaToSqlite.createRepositoryIfNotExistsAsync().then(() => {\n            if (!this.hasSchema(schema)) {\n                this.schemas.push(schema);\n            }\n        });\n    }\n\n    removeRepositoryIfExistsAsync(schema) {\n        return schemaToSqlite.dropRepositoryIfExistsAsync().then(() => {\n            this.removeSchema(schema)\n        });\n    }\n\n    getRepository(name, version) {\n        const schema = this.getSchema({ name, version });\n\n        if (schema == null) {\n            throw new Error(\"Unable to find repository.\");\n        }\n\n        const schemaUtils = new SchemaUtils(schema);\n        const tableName = schemaUtils.getTableName();\n        const primaryKeys = schemaUtils.getPrimaryKeys();\n        const database = this.database;\n\n        return new Repository({\n            database: database,\n            name: tableName,\n            primaryKeys\n        });\n\n    }\n\n}"]}