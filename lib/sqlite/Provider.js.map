{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["Provider","database","Error","sqliteDatabaseWrapper","Sqlite3Wrapper","queryable","queryableToSqlFactory","QueryableToSqlFactory","createWhereStatement","sql","allAsync","toArrayAsync","then","results","createCountStatement","createDeleteStatement","entity","statement","createUpdateStatement","runAsync","values"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,Q;AACjB,4BAEG;AAAA,YADCC,QACD,QADCA,QACD;;AAAA;;AACC,YAAIA,YAAY,IAAhB,EAAsB;AAClB,kBAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAED,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKE,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmB,KAAKH,QAAxB,CAA7B;AACH;;;;qCAEYI,S,EAAW;AACpB,gBAAMC,wBAAwB,IAAIC,+BAAJ,CAA0B,EAAEF,oBAAF,EAA1B,CAA9B;;AADoB,wCAEJC,sBAAsBE,oBAAtB,EAFI;AAAA,gBAEZC,GAFY,yBAEZA,GAFY;;AAIpB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;sCAEaJ,S,EAAU;AACpB,mBAAO,KAAKM,YAAL,CAAkBN,SAAlB,EAA6BO,IAA7B,CAAkC,UAACC,OAAD,EAAW;AAChD,uBAAOA,QAAQ,CAAR,KAAc,IAArB;AACH,aAFM,CAAP;AAGH;;;sCAEaR,S,EAAW;AACrB,gBAAMC,wBAAwB,IAAIC,+BAAJ,CAA0B,EAAEF,oBAAF,EAA1B,CAA9B;;AADqB,yCAELC,sBAAsBQ,oBAAtB,EAFK;AAAA,gBAEbL,GAFa,0BAEbA,GAFa;;AAIrB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,EAAyCG,IAAzC,CAA8C,UAACC,OAAD,EAAa;AAC9D,uBAAOA,QAAQ,CAAR,EAAW,UAAX,CAAP;AACH,aAFM,CAAP;AAIH;;;oCAEWR,S,EAAW;AACnB,gBAAMC,wBAAwB,IAAIC,+BAAJ,CAA0B,EAAEF,oBAAF,EAA1B,CAA9B;;AADmB,yCAEHC,sBAAsBS,qBAAtB,EAFG;AAAA,gBAEXN,GAFW,0BAEXA,GAFW;;AAInB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;oCAEWJ,S,EAAWW,M,EAAQ;AAC3B,gBAAMV,wBAAwB,IAAIC,+BAAJ,CAA0B,EAAEF,oBAAF,EAA1B,CAA9B;AACA,gBAAMY,YAAYX,sBAAsBY,qBAAtB,CAA4CF,MAA5C,CAAlB;;AAEA,mBAAO,KAAKb,qBAAL,CAA2BgB,QAA3B,CAAoCF,UAAUR,GAA9C,EAAmDQ,UAAUG,MAA7D,CAAP;AAEH;;;;;;kBAhDgBpB,Q","file":"Provider.js","sourcesContent":["import QueryableToSqlFactory from \"./factories/QueryableToSqlFactory\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\n\nexport default class Provider {\n    constructor({\n        database\n    }) {\n        if (database == null) {\n            throw new Error(\"Null Exception: database cannot be null.\");\n        }\n\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n    }\n\n    toArrayAsync(queryable) {\n        const queryableToSqlFactory = new QueryableToSqlFactory({ queryable });\n        const { sql } = queryableToSqlFactory.createWhereStatement();\n\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    getFirstAsync(queryable){\n        return this.toArrayAsync(queryable).then((results)=>{\n            return results[0] || null\n        });\n    }\n\n    getCountAsync(queryable) {\n        const queryableToSqlFactory = new QueryableToSqlFactory({ queryable });\n        const { sql } = queryableToSqlFactory.createCountStatement();\n\n        return this.sqliteDatabaseWrapper.allAsync(sql).then((results) => {\n            return results[0][\"count(*)\"];\n        });\n\n    }\n\n    removeAsync(queryable) {\n        const queryableToSqlFactory = new QueryableToSqlFactory({ queryable });\n        const { sql } = queryableToSqlFactory.createDeleteStatement();\n\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    updateAsync(queryable, entity) {\n        const queryableToSqlFactory = new QueryableToSqlFactory({ queryable });\n        const statement = queryableToSqlFactory.createUpdateStatement(entity);\n\n        return this.sqliteDatabaseWrapper.runAsync(statement.sql, statement.values);\n\n    }\n\n\n}"]}