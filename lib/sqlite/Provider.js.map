{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["Provider","database","Error","sqliteDatabaseWrapper","Sqlite3Wrapper","queryable","selectStatementCreator","SelectStatementCreator","createStatement","sql","allAsync","toArrayAsync","then","results","countStatementCreator","CountStatementCreator","deleteWhereStatementCreator","DeleteWhereStatementCreator","entity","updateWhereStatementCreator","UpdateWhereStatementCreator","statement","runAsync","values"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Q;AACjB,4BAEG;AAAA,YADCC,QACD,QADCA,QACD;;AAAA;;AACC,YAAIA,YAAY,IAAhB,EAAsB;AAClB,kBAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAED,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKE,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmB,KAAKH,QAAxB,CAA7B;AACH;;;;qCAEYI,S,EAAW;AACpB,gBAAMC,yBAAyB,IAAIC,gCAAJ,CAA2BF,SAA3B,CAA/B;;AADoB,wCAEJC,uBAAuBE,eAAvB,EAFI;AAAA,gBAEZC,GAFY,yBAEZA,GAFY;;AAIpB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;sCAEaJ,S,EAAU;AACpB,mBAAO,KAAKM,YAAL,CAAkBN,SAAlB,EAA6BO,IAA7B,CAAkC,UAACC,OAAD,EAAW;AAChD,uBAAOA,QAAQ,CAAR,KAAc,IAArB;AACH,aAFM,CAAP;AAGH;;;sCAEaR,S,EAAW;AACrB,gBAAMS,wBAAwB,IAAIC,+BAAJ,CAA0BV,SAA1B,CAA9B;;AADqB,wCAELS,sBAAsBN,eAAtB,EAFK;AAAA,gBAEbC,GAFa,yBAEbA,GAFa;;AAIrB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,EAAyCG,IAAzC,CAA8C,UAACC,OAAD,EAAa;AAC9D,uBAAOA,QAAQ,CAAR,EAAW,UAAX,CAAP;AACH,aAFM,CAAP;AAIH;;;oCAEWR,S,EAAW;AACnB,gBAAMW,8BAA8B,IAAIC,qCAAJ,CAAgC,EAAEZ,oBAAF,EAAhC,CAApC;;AADmB,wCAEHW,4BAA4BR,eAA5B,EAFG;AAAA,gBAEXC,GAFW,yBAEXA,GAFW;;AAInB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;oCAEWJ,S,EAAWa,M,EAAQ;AAC3B,gBAAMC,8BAA8B,IAAIC,qCAAJ,CAAgC,EAAEf,oBAAF,EAAhC,CAApC;AACA,gBAAMgB,YAAYF,4BAA4BX,eAA5B,CAA4CU,MAA5C,CAAlB;;AAEA,mBAAO,KAAKf,qBAAL,CAA2BmB,QAA3B,CAAoCD,UAAUZ,GAA9C,EAAmDY,UAAUE,MAA7D,CAAP;AAEH;;;;;;kBAhDgBvB,Q","file":"Provider.js","sourcesContent":["import SelectStatementCreator from \"./statements/SelectStatementCreator\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport CountStatementCreator from \"./statements/CountStatementCreator\";\nimport DeleteWhereStatementCreator from \"./statements/DeleteWhereStatementCreator\";\nimport UpdateWhereStatementCreator from \"./statements/UpdateWhereStatementCreator\";\n\nexport default class Provider {\n    constructor({\n        database\n    }) {\n        if (database == null) {\n            throw new Error(\"Null Exception: database cannot be null.\");\n        }\n\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n    }\n\n    toArrayAsync(queryable) {\n        const selectStatementCreator = new SelectStatementCreator(queryable);\n        const { sql } = selectStatementCreator.createStatement();\n\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    getFirstAsync(queryable){\n        return this.toArrayAsync(queryable).then((results)=>{\n            return results[0] || null\n        });\n    }\n\n    getCountAsync(queryable) {\n        const countStatementCreator = new CountStatementCreator(queryable);\n        const { sql } = countStatementCreator.createStatement();\n\n        return this.sqliteDatabaseWrapper.allAsync(sql).then((results) => {\n            return results[0][\"count(*)\"];\n        });\n\n    }\n\n    removeAsync(queryable) {\n        const deleteWhereStatementCreator = new DeleteWhereStatementCreator({ queryable });\n        const { sql } = deleteWhereStatementCreator.createStatement();\n\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    updateAsync(queryable, entity) {\n        const updateWhereStatementCreator = new UpdateWhereStatementCreator({ queryable });\n        const statement = updateWhereStatementCreator.createStatement(entity);\n\n        return this.sqliteDatabaseWrapper.runAsync(statement.sql, statement.values);\n\n    }\n\n\n}"]}