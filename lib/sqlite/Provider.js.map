{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["Provider","database","Error","sqliteDatabaseWrapper","Sqlite3Wrapper","queryable","SelectStatementCreator","createStatement","sql","allAsync","toArrayAsync","then","results","CountStatementCreator","DeleteWhereStatementCreator","updates","UpdateWhereStatementCreator","values","runAsync"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Q;AACjB,4BAEG;AAAA,YADCC,QACD,QADCA,QACD;;AAAA;;AACC,YAAIA,YAAY,IAAhB,EAAsB;AAClB,kBAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAED,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKE,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmB,KAAKH,QAAxB,CAA7B;AACH;;;;qCAEYI,S,EAAW;AAAA,wCACJC,iCAAuBC,eAAvB,CAAuCF,SAAvC,CADI;AAAA,gBACZG,GADY,yBACZA,GADY;;AAEpB,mBAAO,KAAKL,qBAAL,CAA2BM,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;sCAEaH,S,EAAW;AACrB,mBAAO,KAAKK,YAAL,CAAkBL,SAAlB,EAA6BM,IAA7B,CAAkC,UAACC,OAAD,EAAa;AAClD,uBAAOA,QAAQ,CAAR,KAAc,IAArB;AACH,aAFM,CAAP;AAGH;;;sCAEaP,S,EAAW;AAAA,wCACLQ,gCAAsBN,eAAtB,CAAsCF,SAAtC,CADK;AAAA,gBACbG,GADa,yBACbA,GADa;;AAGrB,mBAAO,KAAKL,qBAAL,CAA2BM,QAA3B,CAAoCD,GAApC,EAAyCG,IAAzC,CAA8C,UAACC,OAAD,EAAa;AAC9D,uBAAOA,QAAQ,CAAR,EAAW,UAAX,CAAP;AACH,aAFM,CAAP;AAIH;;;oCAEWP,S,EAAW;AAAA,wCACHS,sCAA4BP,eAA5B,CAA4CF,SAA5C,CADG;AAAA,gBACXG,GADW,yBACXA,GADW;;AAGnB,mBAAO,KAAKL,qBAAL,CAA2BM,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;oCAEWH,S,EAAWU,O,EAAS;AAAA,wCACJC,sCAA4BT,eAA5B,CAA4CF,SAA5C,EAAuDU,OAAvD,CADI;AAAA,gBACpBP,GADoB,yBACpBA,GADoB;AAAA,gBACfS,MADe,yBACfA,MADe;;AAG5B,mBAAO,KAAKd,qBAAL,CAA2Be,QAA3B,CAAoCV,GAApC,EAAyCS,MAAzC,CAAP;AACH;;;;;;kBA1CgBjB,Q","file":"Provider.js","sourcesContent":["import SelectStatementCreator from \"./statements/SelectStatementCreator\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport CountStatementCreator from \"./statements/CountStatementCreator\";\nimport DeleteWhereStatementCreator from \"./statements/DeleteWhereStatementCreator\";\nimport UpdateWhereStatementCreator from \"./statements/UpdateWhereStatementCreator\";\n\nexport default class Provider {\n    constructor({\n        database\n    }) {\n        if (database == null) {\n            throw new Error(\"Null Exception: database cannot be null.\");\n        }\n\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n    }\n\n    toArrayAsync(queryable) {\n        const { sql } = SelectStatementCreator.createStatement(queryable);\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    getFirstAsync(queryable) {\n        return this.toArrayAsync(queryable).then((results) => {\n            return results[0] || null\n        });\n    }\n\n    getCountAsync(queryable) {\n        const { sql } = CountStatementCreator.createStatement(queryable);\n\n        return this.sqliteDatabaseWrapper.allAsync(sql).then((results) => {\n            return results[0][\"count(*)\"];\n        });\n\n    }\n\n    removeAsync(queryable) {\n        const { sql } = DeleteWhereStatementCreator.createStatement(queryable);\n\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    updateAsync(queryable, updates) {\n        const { sql, values } = UpdateWhereStatementCreator.createStatement(queryable, updates);\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n\n}"]}