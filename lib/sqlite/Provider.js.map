{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["defaultRefineQueryable","queryable","Provider","database","refineQueryable","Error","sqliteDatabaseWrapper","Sqlite3Wrapper","error","_safelyRefineQueryable","SelectStatementCreator","createStatement","sql","allAsync","toArrayAsync","then","results","CountStatementCreator","DeleteWhereStatementCreator","updates","UpdateWhereStatementCreator","values","runAsync"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB;AAAA,WAAaC,SAAb;AAAA,CAA/B;;IAEqBC,Q;AACjB,4BAGG;AAAA,YAFCC,QAED,QAFCA,QAED;AAAA,YADCC,eACD,QADCA,eACD;;AAAA;;AACC,YAAID,YAAY,IAAhB,EAAsB;AAClB,kBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAED,YAAI,OAAOD,eAAP,KAA2B,UAA/B,EAA2C;AACvCA,8BAAkBJ,sBAAlB;AACH;;AAED,aAAKG,QAAL,GAAgBA,QAAhB;AACA,aAAKG,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmB,KAAKJ,QAAxB,CAA7B;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACH;;;;+CAEsBH,S,EAAW;AAC9B,gBAAI;AACA,uBAAOA,YAAY,KAAKG,eAAL,CAAqBH,SAArB,CAAnB;AACH,aAFD,CAEE,OAAOO,KAAP,EAAc;AACZ;AACH;AACD,mBAAOP,SAAP;AACH;;;qCAEYA,S,EAAW;AACpBA,wBAAY,KAAKQ,sBAAL,CAA4BR,SAA5B,CAAZ;;AADoB,wCAEJS,iCAAuBC,eAAvB,CAAuCV,SAAvC,CAFI;AAAA,gBAEZW,GAFY,yBAEZA,GAFY;;AAGpB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;sCAEaX,S,EAAW;AACrB,mBAAO,KAAKa,YAAL,CAAkBb,SAAlB,EAA6Bc,IAA7B,CAAkC,UAACC,OAAD,EAAa;AAClD,uBAAOA,QAAQ,CAAR,KAAc,IAArB;AACH,aAFM,CAAP;AAGH;;;sCAEaf,S,EAAW;AACrBA,wBAAY,KAAKQ,sBAAL,CAA4BR,SAA5B,CAAZ;;AADqB,wCAGLgB,gCAAsBN,eAAtB,CAAsCV,SAAtC,CAHK;AAAA,gBAGbW,GAHa,yBAGbA,GAHa;;AAKrB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,EAAyCG,IAAzC,CAA8C,UAACC,OAAD,EAAa;AAC9D,uBAAOA,QAAQ,CAAR,EAAW,UAAX,CAAP;AACH,aAFM,CAAP;AAGH;;;wCAEef,S,EAAW;AACvBA,wBAAY,KAAKQ,sBAAL,CAA4BR,SAA5B,CAAZ;;AAEA,mBAAOS,iCAAuBC,eAAvB,CAAuCV,SAAvC,CAAP;AACH;;;oCAEWA,S,EAAW;AACnBA,wBAAY,KAAKQ,sBAAL,CAA4BR,SAA5B,CAAZ;;AADmB,wCAGHiB,sCAA4BP,eAA5B,CAA4CV,SAA5C,CAHG;AAAA,gBAGXW,GAHW,yBAGXA,GAHW;;AAKnB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCD,GAApC,CAAP;AACH;;;oCAEWX,S,EAAWkB,O,EAAS;AAC5BlB,wBAAY,KAAKQ,sBAAL,CAA4BR,SAA5B,CAAZ;;AAD4B,wCAGJmB,sCAA4BT,eAA5B,CAA4CV,SAA5C,EAAuDkB,OAAvD,CAHI;AAAA,gBAGpBP,GAHoB,yBAGpBA,GAHoB;AAAA,gBAGfS,MAHe,yBAGfA,MAHe;;AAK5B,mBAAO,KAAKf,qBAAL,CAA2BgB,QAA3B,CAAoCV,GAApC,EAAyCS,MAAzC,CAAP;AACH;;;;;;kBArEgBnB,Q","file":"Provider.js","sourcesContent":["import SelectStatementCreator from \"./statements/SelectStatementCreator\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport CountStatementCreator from \"./statements/CountStatementCreator\";\nimport DeleteWhereStatementCreator from \"./statements/DeleteWhereStatementCreator\";\nimport UpdateWhereStatementCreator from \"./statements/UpdateWhereStatementCreator\";\n\nconst defaultRefineQueryable = queryable => queryable;\n\nexport default class Provider {\n    constructor({\n        database,\n        refineQueryable\n    }) {\n        if (database == null) {\n            throw new Error(\"Null Exception: database cannot be null.\");\n        }\n\n        if (typeof refineQueryable !== \"function\") {\n            refineQueryable = defaultRefineQueryable;\n        }\n\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n        this.refineQueryable = refineQueryable;\n    }\n\n    _safelyRefineQueryable(queryable) {\n        try {\n            return queryable = this.refineQueryable(queryable);\n        } catch (error) {\n            //Swallow Error\n        }\n        return queryable;\n    }\n\n    toArrayAsync(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n        const { sql } = SelectStatementCreator.createStatement(queryable);\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    getFirstAsync(queryable) {\n        return this.toArrayAsync(queryable).then((results) => {\n            return results[0] || null\n        });\n    }\n\n    getCountAsync(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        const { sql } = CountStatementCreator.createStatement(queryable);\n\n        return this.sqliteDatabaseWrapper.allAsync(sql).then((results) => {\n            return results[0][\"count(*)\"];\n        });\n    }\n\n    getSqlAndValues(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        return SelectStatementCreator.createStatement(queryable);\n    }\n\n    removeAsync(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        const { sql } = DeleteWhereStatementCreator.createStatement(queryable);\n\n        return this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    updateAsync(queryable, updates) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        const { sql, values } = UpdateWhereStatementCreator.createStatement(queryable, updates);\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n\n}"]}