{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["defaultRefineQueryable","queryable","Provider","constructor","database","refineQueryable","Error","sqliteDatabaseWrapper","Sqlite3Wrapper","_safelyRefineQueryable","alteredQueryable","Queryable","error","toArrayAsync","sql","SelectStatementCreator","createStatement","allAsync","getFirstAsync","results","getCountAsync","CountStatementCreator","getSqlAndValues","removeAsync","DeleteWhereStatementCreator","updateAsync","updates","values","UpdateWhereStatementCreator","runAsync"],"mappings":"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","sourcesContent":["import SelectStatementCreator from \"./statements/SelectStatementCreator\";\nimport Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport CountStatementCreator from \"./statements/CountStatementCreator\";\nimport DeleteWhereStatementCreator from \"./statements/DeleteWhereStatementCreator\";\nimport UpdateWhereStatementCreator from \"./statements/UpdateWhereStatementCreator\";\nimport Queryable from \"../../lib/queryable/Queryable\";\n\nconst defaultRefineQueryable = queryable => queryable;\n\nexport default class Provider {\n    constructor({\n        database,\n        refineQueryable\n    }) {\n        if (database == null) {\n            throw new Error(\"Null Exception: database cannot be null.\");\n        }\n\n        if (typeof refineQueryable !== \"function\") {\n            refineQueryable = defaultRefineQueryable;\n        }\n\n        this.database = database;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(this.database);\n        this.refineQueryable = refineQueryable;\n    }\n\n    _safelyRefineQueryable(queryable) {\n        try {\n            const alteredQueryable = this.refineQueryable(queryable);\n\n            if (!(alteredQueryable instanceof Queryable)) {\n                throw new Error(\"Expected to have a queryable returned on refine Queryable.\");\n            }\n\n            return alteredQueryable;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async toArrayAsync(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n        const { sql } = SelectStatementCreator.createStatement(queryable);\n        return await this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    async getFirstAsync(queryable) {\n        const results = await this.toArrayAsync(queryable);\n        return results[0] || null\n    }\n\n    async getCountAsync(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        const { sql } = CountStatementCreator.createStatement(queryable);\n        const results = await this.sqliteDatabaseWrapper.allAsync(sql);\n\n        return results[0][\"count(*)\"];\n    }\n\n    getSqlAndValues(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        return SelectStatementCreator.createStatement(queryable);\n    }\n\n    async removeAsync(queryable) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        const { sql } = DeleteWhereStatementCreator.createStatement(queryable);\n\n        return await this.sqliteDatabaseWrapper.allAsync(sql);\n    }\n\n    async updateAsync(queryable, updates) {\n        queryable = this._safelyRefineQueryable(queryable);\n\n        const { sql, values } = UpdateWhereStatementCreator.createStatement(queryable, updates);\n\n        return await this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n\n}"],"file":"Provider.js"}