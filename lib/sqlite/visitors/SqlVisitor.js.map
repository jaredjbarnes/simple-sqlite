{"version":3,"sources":["../../../src/sqlite/visitors/SqlVisitor.js"],"names":["SqlVisitor","args","length","join","property","value","toEndsWithString","toStartsWithString","toContainsString","toString","queryable","Queryable","fromObject","selectStatementCreator","SelectStatementCreator","createStatement","sql","Error","SqlString","getTime","Array","isArray","series","map","item","string","number","boolean","Date","date","name","SqliteUtils","escapeName","type","table","node","where","visit","Visitor"],"mappings":"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","file":"SqlVisitor.js","sourcesContent":["import Visitor from \"./Visitor\";\nimport SelectStatementCreator from \"../statements/SelectStatementCreator\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\nimport Queryable from \"../../queryable/Queryable\";\nimport SqlString from \"./SqlString\";\n\nexport default class SqlVisitor extends Visitor {\n    and(...args) {\n        if (args.length === 0) {\n            return \"\";\n        }\n\n        return `(${args.join(\" AND \")})`;\n    }\n\n    or(...args) {\n        if (args.length === 0) {\n            return \"\";\n        }\n\n        return `(${args.join(\" OR \")})`;\n    }\n\n    endsWith(property, value) {\n        return `${property} LIKE ${value.toEndsWithString()}`;\n    }\n\n    startsWith(property, value) {\n        return `${property} LIKE ${value.toStartsWithString()}`;\n    }\n\n    contains(property, value) {\n        return `${property} LIKE ${value.toContainsString()}`;\n    }\n\n    isEqualTo(property, value) {\n        return `${property} = ${value.toString()}`;\n    }\n\n    isNotEqualTo(property, value) {\n        return `${property} != ${value.toString()}`;\n    }\n\n    isGreaterThan(property, value) {\n        return `${property} > ${value.toString()}`;\n    }\n\n    isGreaterThanOrEqualTo(property, value) {\n        return `${property} >= ${value.toString()}`;\n    }\n\n    isLessThan(property, value) {\n        return `${property} < ${value.toString()}`;\n    }\n\n    isLessThanOrEqualTo(property, value) {\n        return `${property} <= ${value.toString()}`;\n    }\n\n    isIn(property, value) {\n        return `${property} IN ${value}`;\n    }\n\n    isNotIn(property, value) {\n        return `${property} NOT IN ${value}`;\n    }\n\n    queryable(value) {\n        const queryable = Queryable.fromObject(value);\n\n        const selectStatementCreator = new SelectStatementCreator(queryable);\n        const { sql } = selectStatementCreator.createStatement();\n        return `(${sql})`;\n    }\n\n    string(value) {\n        if (typeof value !== \"string\") {\n            throw new Error(\"Invalid string value.\");\n        }\n\n        return new SqlString(value);\n    }\n\n    boolean(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(\"Invalid boolean value.\");\n        }\n\n        return value.toString();\n    }\n\n    number(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Invalid number value.\");\n        }\n\n        return value;\n    }\n\n    date(value) {\n        if (!(value instanceof value)) {\n            throw new Error(\"Invalid date value.\");\n        }\n\n        return value.getTime();\n    }\n\n    array(value) {\n        if (!Array.isArray(value)) {\n            throw new Error(\"Invalid array value.\");\n        }\n\n        const series = value.map((item) => {\n\n            if (typeof item === \"string\") {\n                return this.string(item).toString();\n            } else if (typeof item === \"number\") {\n                return this.number(item);\n            } else if (typeof item === \"boolean\") {\n                return this.boolean(item);\n            } else if (item instanceof Date) {\n                return this.date(item);\n            } else {\n                throw new Error(\"Invalid Argument: Unknown primitive type.\");\n            }\n\n        }).join(\", \");\n\n        return `(${series})`;\n    }\n\n    propertyName(name) {\n        return SqliteUtils.escapeName(name);\n    }\n\n    property(type, name) {\n        return name;\n    }\n\n    type(value) {\n        this.table = value;\n        return value;\n    }\n\n    createWhereExpression(node) {\n\n        const where = this.visit(node);\n\n        if (where == null) {\n            return \"\";\n        }\n\n        return `WHERE ${where}`;\n\n    }\n}\n"]}