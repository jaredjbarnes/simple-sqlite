{"version":3,"sources":["../../../src/sqlite/visitors/SqlVisitor.js"],"names":["SqlString","value","replace","SqlVisitor","args","length","join","property","toEndsWithString","toStartsWithString","toContainsString","toString","queryableToSqlFactory","QueryableToSqlFactory","queryable","createWhereStatement","sql","series","map","item","string","number","boolean","Error","name","type","table","node","where","visit","Visitor"],"mappings":"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","file":"SqlVisitor.js","sourcesContent":["import Visitor from \"./Visitor\";\nimport QueryableToSqlFactory from \"../factories/QueryableToSqlFactory\";\n\nclass SqlString {\n    constructor(value) {\n        this.value = `${value.replace(\"'\", \"''\")}`;\n    }\n\n    toString() {\n        return `'${this.value}'`;\n    }\n\n    toEndsWithString() {\n        return `'%${this.value}'`;\n    }\n\n    toContainsString() {\n        return `'%${this.value}%'`;\n    }\n\n    toStartsWithString() {\n        return `'${this.value}%'`;\n    }\n}\n\nexport default class SqlVisitor extends Visitor {\n    and(...args) {\n        if (args.length === 0) {\n            return \"\";\n        }\n\n        return `(${args.join(\" AND \")})`;\n    }\n\n    or(...args) {\n        if (args.length === 0) {\n            return \"\";\n        }\n\n        return `(${args.join(\" OR \")})`;\n    }\n\n    endsWith(property, value) {\n        return `${property} LIKE ${value.toEndsWithString()}`;\n    }\n\n    startsWith(property, value) {\n        return `${property} LIKE ${value.toStartsWithString()}`;\n    }\n\n    contains(property, value) {\n        return `${property} LIKE ${value.toContainsString()}`;\n    }\n\n    isEqualTo(property, value) {\n        return `${property} = ${value.toString()}`;\n    }\n\n    isNotEqualTo(property, value) {\n        return `${property} != ${value.toString()}`;\n    }\n\n    isGreaterThan(property, value) {\n        return `${property} > ${value.toString()}`;\n    }\n\n    isGreaterThanOrEqualTo(property, value) {\n        return `${property} >= ${value.toString()}`;\n    }\n\n    isLessThan(property, value) {\n        return `${property} < ${value.toString()}`;\n    }\n\n    isLessThanOrEqualTo(property, value) {\n        return `${property} <= ${value.toString()}`;\n    }\n\n    isIn(property, value) {\n        return `${property} IN ${value}`;\n    }\n\n    isNotIn(property, value) {\n        return `${property} NOT IN ${value}`;\n    }\n\n    queryable(value) {\n        const queryableToSqlFactory = new QueryableToSqlFactory({ queryable: value });\n        const { sql } = queryableToSqlFactory.createWhereStatement();\n        return `(${sql})`;\n    }\n\n    string(value) {\n        return new SqlString(value);\n    }\n\n    boolean(value) {\n        return value.toString();\n    }\n\n    number(value) {\n        return value;\n    }\n\n    array(value) {\n        const series = value.map((item) => {\n\n            if (typeof item === \"string\") {\n                return this.string(item).toString();\n            } else if (typeof item === \"number\") {\n                return this.number(item);\n            } else if (typeof item === \"boolean\") {\n                return this.boolean(item);\n            } else {\n                throw new Error(\"Invalid Argument: Unknown primitive type.\");\n            }\n\n        }).join(\", \");\n\n        return `(${series})`;\n    }\n\n    propertyName(name) {\n        return name;\n    }\n\n    property(type, name) {\n        return `${name}`;\n    }\n\n    type(value) {\n        this.table = value;\n        return value;\n    }\n\n    createWhereStatement(node) {\n        const where = this.visit(node);\n\n        if (where == null) {\n            return \"\";\n        }\n\n        return `WHERE ${where}`;\n\n    }\n}\n"]}