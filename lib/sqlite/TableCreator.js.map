{"version":3,"sources":["../../src/sqlite/TableCreator.js"],"names":["TableCreator","database","schema","sqliteDatabaseWrapper","Sqlite3Wrapper","schemaToSqliteFactory","TableStatementCreator","createTableStatement","sql","values","runAsync","createDropTableStatment","tableCreator","createTableIfNotExistsAsync","schemas","promises","map","Promise","all","dropTableIfExistsAsync"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,Y;AACjB,gCAGG;AAAA,YAFCC,QAED,QAFCA,QAED;AAAA,YADCC,MACD,QADCA,MACD;;AAAA;;AACC,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmBH,QAAnB,CAA7B;AACA,aAAKI,qBAAL,GAA6B,IAAIC,+BAAJ,CAA0BJ,MAA1B,CAA7B;AACH;;;;sDAgD6B;AAAA,wCAItB,KAAKG,qBAAL,CAA2BE,oBAA3B,EAJsB;AAAA,gBAEtBC,GAFsB,yBAEtBA,GAFsB;AAAA,gBAGtBC,MAHsB,yBAGtBA,MAHsB;;AAM1B,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AACH;;;iDAEwB;AAAA,yCAIjB,KAAKJ,qBAAL,CAA2BM,uBAA3B,EAJiB;AAAA,gBAEjBH,GAFiB,0BAEjBA,GAFiB;AAAA,gBAGjBC,MAHiB,0BAGjBA,MAHiB;;AAMrB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AAEH;;;2DA/DwD;AAAA,gBAApBR,QAAoB,SAApBA,QAAoB;AAAA,gBAAVC,MAAU,SAAVA,MAAU;;AACrD,gBAAMU,eAAe,IAAIZ,YAAJ,CAAiB;AAClCC,0BAAUA,QADwB;AAElCC;AAFkC,aAAjB,CAArB;;AAKA,mBAAOU,aAAaC,2BAAb,EAAP;AACH;;;4DAE0D;AAAA,gBAArBZ,QAAqB,SAArBA,QAAqB;AAAA,gBAAXa,OAAW,SAAXA,OAAW;;AACvD,gBAAMC,WAAWD,QAAQE,GAAR,CAAY,UAACd,MAAD,EAAY;AACrC,oBAAMU,eAAe,IAAIZ,YAAJ,CAAiB;AAClCC,8BAAUA,QADwB;AAElCC;AAFkC,iBAAjB,CAArB;;AAKA,uBAAOU,aAAaC,2BAAb,EAAP;AACH,aAPgB,CAAjB;;AASA,mBAAOI,QAAQC,GAAR,CAAYH,QAAZ,CAAP;AACH;;;sDAEmD;AAAA,gBAApBd,QAAoB,SAApBA,QAAoB;AAAA,gBAAVC,MAAU,SAAVA,MAAU;;AAChD,gBAAMU,eAAe,IAAIZ,YAAJ,CAAiB;AAClCC,0BAAUA,QADwB;AAElCC;AAFkC,aAAjB,CAArB;;AAKA,mBAAOU,aAAaO,sBAAb,EAAP;AACH;;;sDAEoD;AAAA,gBAArBlB,QAAqB,SAArBA,QAAqB;AAAA,gBAAXa,OAAW,SAAXA,OAAW;;;AAEjD,gBAAMC,WAAWD,QAAQE,GAAR,CAAY,UAACd,MAAD,EAAY;AACrC,oBAAMU,eAAe,IAAIZ,YAAJ,CAAiB;AAClCC,8BAAUA,QADwB;AAElCC;AAFkC,iBAAjB,CAArB;;AAKA,uBAAOU,aAAaO,sBAAb,EAAP;AACH,aAPgB,CAAjB;;AASA,mBAAOF,QAAQC,GAAR,CAAYH,QAAZ,CAAP;AAEH;;;;;;kBAvDgBf,Y","file":"TableCreator.js","sourcesContent":["import Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport TableStatementCreator from \"./statements/TableStatementCreator\";\n\nexport default class TableCreator {\n    constructor({\n        database,\n        schema\n    }) {\n        this.database = database;\n        this.schema = schema;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(database);\n        this.schemaToSqliteFactory = new TableStatementCreator(schema);\n    }\n\n    static createTableIfNotExistsAsync({ database, schema }) {\n        const tableCreator = new TableCreator({\n            database: database,\n            schema\n        });\n\n        return tableCreator.createTableIfNotExistsAsync();\n    }\n\n    static createTablesIfNotExistsAsync({ database, schemas }) {\n        const promises = schemas.map((schema) => {\n            const tableCreator = new TableCreator({\n                database: database,\n                schema\n            });\n\n            return tableCreator.createTableIfNotExistsAsync();\n        });\n\n        return Promise.all(promises);\n    }\n\n    static dropTableIfExistsAsync({ database, schema }) {\n        const tableCreator = new TableCreator({\n            database: database,\n            schema\n        });\n\n        return tableCreator.dropTableIfExistsAsync();\n    }\n\n    static dropTableIfExistsAsync({ database, schemas }) {\n\n        const promises = schemas.map((schema) => {\n            const tableCreator = new TableCreator({\n                database: database,\n                schema\n            });\n\n            return tableCreator.dropTableIfExistsAsync();\n        });\n\n        return Promise.all(promises);\n\n    }\n\n    createTableIfNotExistsAsync() {\n        const {\n            sql,\n            values\n        } = this.schemaToSqliteFactory.createTableStatement();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n    dropTableIfExistsAsync() {\n        const {\n            sql,\n            values\n        } = this.schemaToSqliteFactory.createDropTableStatment();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n\n    }\n}"]}