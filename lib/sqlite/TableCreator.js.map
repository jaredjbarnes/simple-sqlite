{"version":3,"sources":["../../src/sqlite/TableCreator.js"],"names":["TableCreator","database","schema","sqliteDatabaseWrapper","Sqlite3Wrapper","schemaToSqliteFactory","TableStatementCreator","createTableStatement","sql","values","runAsync","createDropTableStatment","tableCreator","createTableIfNotExistsAsync","dropTableIfExistsAsync"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,Y;AACjB,gCAGE;AAAA,YAFEC,QAEF,QAFEA,QAEF;AAAA,YADEC,MACF,QADEA,MACF;;AAAA;;AACE,aAAKD,QAAL,GAAgBA,QAAhB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,qBAAL,GAA6B,IAAIC,wBAAJ,CAAmBH,QAAnB,CAA7B;AACA,aAAKI,qBAAL,GAA6B,IAAIC,+BAAJ,CAA0BJ,MAA1B,CAA7B;AACH;;;;sDAsB4B;AAAA,wCAIrB,KAAKG,qBAAL,CAA2BE,oBAA3B,EAJqB;AAAA,gBAErBC,GAFqB,yBAErBA,GAFqB;AAAA,gBAGrBC,MAHqB,yBAGrBA,MAHqB;;AAMzB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AACH;;;iDAEuB;AAAA,yCAIhB,KAAKJ,qBAAL,CAA2BM,uBAA3B,EAJgB;AAAA,gBAEhBH,GAFgB,0BAEhBA,GAFgB;AAAA,gBAGhBC,MAHgB,0BAGhBA,MAHgB;;AAMpB,mBAAO,KAAKN,qBAAL,CAA2BO,QAA3B,CAAoCF,GAApC,EAAyCC,MAAzC,CAAP;AAEH;;;2DArCqD;AAAA,gBAAlBR,QAAkB,SAAlBA,QAAkB;AAAA,gBAARC,MAAQ,SAARA,MAAQ;;AAClD,gBAAMU,eAAe,IAAIZ,YAAJ,CAAiB;AAClCC,0BAAUA,QADwB;AAElCC;AAFkC,aAAjB,CAArB;;AAKA,mBAAOU,aAAaC,2BAAb,EAAP;AACH;;;sDAEgD;AAAA,gBAAlBZ,QAAkB,SAAlBA,QAAkB;AAAA,gBAARC,MAAQ,SAARA,MAAQ;;AAC7C,gBAAMU,eAAe,IAAIZ,YAAJ,CAAiB;AAClCC,0BAAUA,QADwB;AAElCC;AAFkC,aAAjB,CAArB;;AAKA,mBAAOU,aAAaE,sBAAb,EAAP;AACH;;;;;;kBA3BgBd,Y","file":"TableCreator.js","sourcesContent":["import Sqlite3Wrapper from \"./Sqlite3Wrapper\";\nimport TableStatementCreator from \"./statements/TableStatementCreator\";\n\nexport default class TableCreator {\n    constructor({\n        database,\n        schema\n    }){\n        this.database = database;\n        this.schema = schema;\n        this.sqliteDatabaseWrapper = new Sqlite3Wrapper(database);\n        this.schemaToSqliteFactory = new TableStatementCreator(schema);\n    }\n\n    static createTableIfNotExistsAsync({database, schema}){\n        const tableCreator = new TableCreator({\n            database: database,\n            schema\n        });\n\n        return tableCreator.createTableIfNotExistsAsync();\n    }\n\n    static dropTableIfExistsAsync({database, schema}){\n        const tableCreator = new TableCreator({\n            database: database,\n            schema\n        });\n\n        return tableCreator.dropTableIfExistsAsync();\n    }\n\n\n\n    createTableIfNotExistsAsync(){\n        const {\n            sql,\n            values\n        } = this.schemaToSqliteFactory.createTableStatement();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    }\n\n    dropTableIfExistsAsync(){\n        const {\n            sql,\n            values\n        } = this.schemaToSqliteFactory.createDropTableStatment();\n\n        return this.sqliteDatabaseWrapper.runAsync(sql, values);\n    \n    }\n}"]}