{"version":3,"sources":["../../../src/sqlite/statements/TableStatementCreator.js"],"names":["TableStatementCreator","constructor","schema","createTableStatement","tableStatementCreator","createDropTableStatement","getTableName","SqliteUtils","escapeName","name","removeNullOrEmptyStrings","expression","filter","part","length","validateSchema","SchemaValidator","validate","createPrimaryKeysExpression","keys","primaryKeys","map","column","join","createUniqueExpressions","Array","isArray","unique","uniqueExpression","UniqueExpressionCreator","createExpression","createForeignKeysExpression","foreignKeys","Object","columnName","source","sourceColumn","push","createColumnsExpression","cleanedExpression","sql","values","createDropTableStatment","createColumnExpression","type","isRequired","defaultValue","sqlizeValue","createIndexStatements","statement","columns","isIndexed","isUnique","tableName"],"mappings":"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","sourcesContent":["import SqliteUtils from \"../utils/SqliteUtils\";\nimport UniqueExpressionCreator from \"./UniqueExpressionCreator\";\nimport SchemaValidator from \"../SchemaValidator\";\n\nexport default class TableStatementCreator {\n    constructor(schema) {\n        this.schema = schema;\n    }\n\n    static createTableStatement(schema) {\n        const tableStatementCreator = new TableStatementCreator(schema);\n        return tableStatementCreator.createTableStatement();\n    }\n\n    static createDropTableStatement() {\n        const tableStatementCreator = new TableStatementCreator(schema);\n        return tableStatementCreator.createDropTableStatement();\n    }\n\n    getTableName() {\n        return SqliteUtils.escapeName(this.schema.name);\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    validateSchema() {\n        return SchemaValidator.validate(this.schema);\n    }\n\n    createPrimaryKeysExpression() {\n        const keys = this.schema.primaryKeys.map((column) => {\n            return SqliteUtils.escapeName(column);\n        }).join(\", \");\n\n        return `PRIMARY KEY(${keys})`;\n    }\n\n    createUniqueExpressions() {\n        if (Array.isArray(this.schema.unique)) {\n            return this.schema.unique.map((unique) => {\n\n                const uniqueExpression = new UniqueExpressionCreator(unique);\n                return uniqueExpression.createExpression();\n\n            }).join(\", \");\n        }\n        return \"\";\n    }\n\n    createForeignKeysExpression() {\n        const foreignKeys = this.schema.foreignKeys || {};\n\n        return Object.keys(foreignKeys).map((name) => {\n            const column = foreignKeys[name];\n            const columnName = SqliteUtils.escapeName(name);\n            const source = SqliteUtils.escapeName(column.source.name);\n            const sourceColumn = SqliteUtils.escapeName(column.source.column);\n\n            return `FOREIGN KEY (${columnName}) REFERENCES ${source} (${sourceColumn})`;\n        }).join(\", \");\n    }\n\n    createTableStatement() {\n        this.validateSchema();\n        const expression = [];\n\n        expression.push(this.createColumnsExpression());\n        expression.push(this.createPrimaryKeysExpression());\n        expression.push(this.createUniqueExpressions());\n        expression.push(this.createForeignKeysExpression());\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        const sql = `CREATE TABLE IF NOT EXISTS ${this.getTableName()} (${cleanedExpression.join(\", \")})`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createDropTableStatment() {\n        const sql = `DROP TABLE IF EXISTS ${this.getTableName()}`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createColumnExpression({\n        name,\n        type,\n        isRequired,\n        defaultValue\n    }) {\n\n        const expression = [];\n        expression.push(`${SqliteUtils.escapeName(name)}`);\n\n        expression.push(type);\n\n        if (isRequired) {\n            expression.push(\"NOT NULL\");\n        }\n\n        if (defaultValue != null) {\n            expression.push(this.sqlizeValue(defaultValue));\n        }\n\n        return expression.join(\" \");\n    }\n\n    createIndexStatements() {\n        const statement = this.schema.columns.filter((column) => {\n            return column.isIndexed;\n        }).map((column) => {\n            const isUnique = column.isUnique ? \" UNIQUE \" : \" \";\n            const tableName = this.getTableName();\n            const name = SqliteUtils.escapeName(`${this.schema.name}_${column.name}`);\n\n            const columnName = SqliteUtils.escapeName(column.name);\n            return `CREATE${isUnique}INDEX IF NOT EXIST ${name} ON ${tableName} (${columnName})`;\n        });\n\n        if (statement.length > 0) {\n            return statement.join(\";\") + \";\";\n        } else {\n            return null;\n        }\n    }\n\n    createColumnsExpression() {\n        return this.schema.columns.map((column) => {\n            return this.createColumnExpression(column);\n        }).join(\", \");\n    }\n}"],"file":"TableStatementCreator.js"}