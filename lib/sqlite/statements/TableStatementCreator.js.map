{"version":3,"sources":["../../../src/sqlite/statements/TableStatementCreator.js"],"names":["TableStatementCreator","constructor","schema","validator","jsonschema","Validator","createTableStatement","tableStatementCreator","createDropTableStatement","getTableName","SqliteUtils","escapeName","SchemaUtils","getTableNameFromSchema","removeNullOrEmptyStrings","expression","filter","part","length","validateSchema","validationResults","validate","tableJsonSchema","errors","error","Error","validationErrors","createPrimaryKeysExpression","keys","primaryKeys","map","column","join","createUniqueExpressions","Array","isArray","unique","uniqueExpression","UniqueExpressionCreator","createExpression","createForeignKeysExpression","foreignKeys","Object","name","columnName","source","sourceColumn","push","createColumnsExpression","cleanedExpression","sql","values","createDropTableStatment","createColumnExpression","type","isRequired","isIndexed","defaultValue","sqlizeValue","columns"],"mappings":"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","sourcesContent":["import jsonschema from \"jsonschema\";\nimport tableJsonSchema from \"../tableJsonSchema\";\nimport SchemaUtils from \"../utils/SchemaUtils\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\nimport UniqueExpressionCreator from \"./UniqueExpressionCreator\";\n\nexport default class TableStatementCreator {\n    constructor(schema) {\n        this.schema = schema;\n        this.validator = new jsonschema.Validator();\n    }\n\n    static createTableStatement(schema) {\n        const tableStatementCreator = new TableStatementCreator(schema);\n        return tableStatementCreator.createTableStatement();\n    }\n\n    static createDropTableStatement() {\n        const tableStatementCreator = new TableStatementCreator(schema);\n        return tableStatementCreator.createDropTableStatement();\n    }\n\n    getTableName() {\n        return SqliteUtils.escapeName(SchemaUtils.getTableNameFromSchema(this.schema));\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    validateSchema() {\n        const validationResults = this.validator.validate(this.schema, tableJsonSchema);\n\n        if (validationResults.errors.length > 0) {\n            const error = new Error(\"Schema Error\");\n            error.validationErrors = validationResults.errors;\n            throw error;\n        }\n    }\n\n    createPrimaryKeysExpression() {\n        const keys = this.schema.primaryKeys.map((column) => {\n            return SqliteUtils.escapeName(column);\n        }).join(\", \");\n\n        return `PRIMARY KEY(${keys})`;\n    }\n\n    createUniqueExpressions() {\n        if (Array.isArray(this.schema.unique)) {\n            return this.schema.unique.map((unique) => {\n\n                const uniqueExpression = new UniqueExpressionCreator(unique);\n                return uniqueExpression.createExpression();\n\n            }).join(\", \");\n        }\n        return \"\";\n    }\n\n    createForeignKeysExpression() {\n        const foreignKeys = this.schema.foreignKeys || {};\n\n        return Object.keys(foreignKeys).map((name) => {\n            const column = foreignKeys[name];\n            const columnName = SqliteUtils.escapeName(name);\n            const source = SqliteUtils.escapeName(SchemaUtils.getTableNameFromSchema(column.source));\n            const sourceColumn = SqliteUtils.escapeName(column.source.column);\n\n            return `FOREIGN KEY (${columnName}) REFERENCES ${source} (${sourceColumn})`;\n        }).join(\", \");\n    }\n\n    createTableStatement() {\n        this.validateSchema();\n        const expression = [];\n\n        expression.push(this.createColumnsExpression());\n        expression.push(this.createPrimaryKeysExpression());\n        expression.push(this.createUniqueExpressions());\n        expression.push(this.createForeignKeysExpression());\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        const sql = `CREATE TABLE IF NOT EXISTS ${this.getTableName()} (${cleanedExpression.join(\", \")})`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createDropTableStatment() {\n        const sql = `DROP TABLE IF EXISTS ${this.getTableName()}`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createColumnExpression({\n        name,\n        type,\n        isRequired,\n        isIndexed,\n        defaultValue\n    }) {\n\n        const expression = [];\n        expression.push(`${SqliteUtils.escapeName(name)}`);\n\n        expression.push(type);\n\n        if (isRequired) {\n            expression.push(\"NOT NULL\");\n        }\n\n        if (isIndexed) {\n            expression.push(\"INDEXED\");\n        }\n\n        if (defaultValue != null) {\n            expression.push(this.sqlizeValue(defaultValue));\n        }\n\n        return expression.join(\" \");\n    }\n\n    createColumnsExpression() {\n        return this.schema.columns.map((column) => {\n            return this.createColumnExpression(column);\n        }).join(\", \");\n    }\n}"],"file":"TableStatementCreator.js"}