{"version":3,"sources":["../../../src/sqlite/statements/TableStatementCreator.js"],"names":["TableStatementCreator","schema","validator","jsonschema","Validator","SqliteUtils","escapeName","SchemaUtils","getTableNameFromSchema","expression","filter","part","length","validationResults","validate","repositoryJsonSchema","errors","error","Error","validationErrors","keys","primaryKeys","map","column","join","Array","isArray","unique","uniqueExpression","UniqueExpressionCreator","createExpression","foreignKeys","Object","name","columnName","source","sourceColumn","validateSchema","push","createColumnsExpression","createPrimaryKeysExpression","createUniqueExpressions","createForeignKeysExpression","cleanedExpression","removeNullOrEmptyStrings","sql","getTableName","values","type","isRequired","isIndexed","defaultValue","sqlizeValue","columns","createColumnExpression","tableStatementCreator","createTableStatement","createDropTableStatement"],"mappings":"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","file":"TableStatementCreator.js","sourcesContent":["import jsonschema from \"jsonschema\";\nimport repositoryJsonSchema from \"../repositoryJsonSchema\";\nimport SchemaUtils from \"../utils/SchemaUtils\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\nimport UniqueExpressionCreator from \"./UniqueExpressionCreator\";\n\nexport default class TableStatementCreator {\n    constructor(schema) {\n        this.schema = schema;\n        this.validator = new jsonschema.Validator();\n    }\n\n    static createTableStatement(schema) {\n        const tableStatementCreator = new TableStatementCreator(schema);\n        return tableStatementCreator.createTableStatement();\n    }\n\n    static createDropTableStatement() {\n        const tableStatementCreator = new TableStatementCreator(schema);\n        return tableStatementCreator.createDropTableStatement();\n    }\n\n    getTableName() {\n        return SqliteUtils.escapeName(SchemaUtils.getTableNameFromSchema(this.schema));\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    validateSchema() {\n        const validationResults = this.validator.validate(this.schema, repositoryJsonSchema);\n\n        if (validationResults.errors.length > 0) {\n            const error = new Error(\"Schema Error\");\n            error.validationErrors = validationResults.errors;\n            throw error;\n        }\n    }\n\n    createPrimaryKeysExpression() {\n        const keys = this.schema.primaryKeys.map((column) => {\n            return SqliteUtils.escapeName(column);\n        }).join(\", \");\n\n        return `PRIMARY KEY(${keys})`;\n    }\n\n    createUniqueExpressions() {\n        if (Array.isArray(this.schema.unique)) {\n            return this.schema.unique.map((unique) => {\n\n                const uniqueExpression = new UniqueExpressionCreator(unique);\n                return uniqueExpression.createExpression();\n\n            }).join(\", \");\n        }\n        return \"\";\n    }\n\n    createForeignKeysExpression() {\n        const foreignKeys = this.schema.foreignKeys || {};\n\n        return Object.keys(foreignKeys).map((name) => {\n            const column = foreignKeys[name];\n            const columnName = SqliteUtils.escapeName(name);\n            const source = SqliteUtils.escapeName(SchemaUtils.getTableNameFromSchema(column.source));\n            const sourceColumn = SqliteUtils.escapeName(column.source.column);\n\n            return `FOREIGN KEY (${columnName}) REFERENCES ${source} (${sourceColumn})`;\n        }).join(\", \");\n    }\n\n    createTableStatement() {\n        this.validateSchema();\n        const expression = [];\n\n        expression.push(this.createColumnsExpression());\n        expression.push(this.createPrimaryKeysExpression());\n        expression.push(this.createUniqueExpressions());\n        expression.push(this.createForeignKeysExpression());\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        const sql = `CREATE TABLE IF NOT EXISTS ${this.getTableName()} (${cleanedExpression.join(\", \")})`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createDropTableStatment() {\n        const sql = `DROP TABLE IF EXISTS ${this.getTableName()}`;\n\n        return {\n            sql,\n            values: []\n        }\n    }\n\n    createColumnExpression({\n        name,\n        type,\n        isRequired,\n        isIndexed,\n        defaultValue\n    }) {\n\n        const expression = [];\n        expression.push(`${SqliteUtils.escapeName(name)}`);\n\n        expression.push(type);\n\n        if (isRequired) {\n            expression.push(\"NOT NULL\");\n        }\n\n        if (isIndexed) {\n            expression.push(\"INDEXED\");\n        }\n\n        if (defaultValue != null) {\n            expression.push(this.sqlizeValue(defaultValue));\n        }\n\n        return expression.join(\" \");\n    }\n\n    createColumnsExpression() {\n        return this.schema.columns.map((column) => {\n            return this.createColumnExpression(column);\n        }).join(\", \");\n    }\n}"]}