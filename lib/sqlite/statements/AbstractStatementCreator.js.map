{"version":3,"sources":["../../../src/sqlite/statements/AbstractStatementCreator.js"],"names":["AbstractStatementCreator","entity","tableName","primaryKeys","columns","map","key","SqliteUtils","escapeName","escapeStringValue","join","length","every"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,wB;AACjB,4CAIG;AAAA,YAHCC,MAGD,QAHCA,MAGD;AAAA,YAFCC,SAED,QAFCA,SAED;AAAA,YADCC,WACD,QADCA,WACD;;AAAA;;AACC,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACH;;;;gDAEuB;AACpB,gBAAMF,SAAS,KAAKA,MAApB;AACA,gBAAMG,UAAU,KAAKD,WAAL,CAAiBE,GAAjB,CAAqB,UAACC,GAAD,EAAS;AAC1C,uBAAUC,sBAAYC,UAAZ,CAAuBF,GAAvB,CAAV,WAA2CC,sBAAYE,iBAAZ,CAA8BR,OAAOK,GAAP,CAA9B,CAA3C;AACH,aAFe,EAEbI,IAFa,CAER,IAFQ,CAAhB;;AAIA,8BAAgBN,OAAhB;AACH;;;oDAE2B;AACxB,gBAAMH,SAAS,KAAKA,MAApB;AACA,gBAAI,KAAKE,WAAL,CAAiBQ,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,uBAAOV,OAAO,KAAKE,WAAL,CAAiB,CAAjB,CAAP,KAA+B,IAAtC;AACH,aAFD,MAEO,IAAI,KAAKA,WAAL,CAAiBQ,MAAjB,GAA0B,CAA9B,EAAiC;AACpC,uBAAO,KAAKR,WAAL,CAAiBS,KAAjB,CAAuB,UAACN,GAAD,EAAS;AACnC,2BAAO,OAAOL,OAAOK,GAAP,CAAP,KAAuB,WAA9B;AACH,iBAFM,CAAP;AAGH,aAJM,MAIA;AACH,uBAAO,KAAP;AACH;AACJ;;;;;;kBA/BgBN,wB","file":"AbstractStatementCreator.js","sourcesContent":["import SqliteUtils from \"../utils/SqliteUtils\";\n\nexport default class AbstractStatementCreator {\n    constructor({\n        entity,\n        tableName,\n        primaryKeys\n    }) {\n        this.entity = entity;\n        this.tableName = tableName;\n        this.primaryKeys = primaryKeys;\n    }\n\n    createWhereExpression() {\n        const entity = this.entity;\n        const columns = this.primaryKeys.map((key) => {\n            return `${SqliteUtils.escapeName(key)} = ${SqliteUtils.escapeStringValue(entity[key])}`;\n        }).join(\", \");\n\n        return `WHERE ${columns}`;\n    }\n\n    validateEntityPrimaryKeys() {\n        const entity = this.entity;\n        if (this.primaryKeys.length === 1) {\n            return entity[this.primaryKeys[0]] != null;\n        } else if (this.primaryKeys.length > 1) {\n            return this.primaryKeys.every((key) => {\n                return typeof entity[key] !== \"undefined\";\n            })\n        } else {\n            return false;\n        }\n    }\n\n}"]}