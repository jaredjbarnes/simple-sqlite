{"version":3,"sources":["../../../src/sqlite/statements/CountStatementCreator.js"],"names":["CountStatementCreator","queryable","Error","SqliteUtils","escapeName","query","type","expression","filter","part","length","visitor","SqlVisitor","createWhereExpression","getTableName","selectSql","createSelectSql","whereSql","createWhereSql","push","cleanedExpression","removeNullOrEmptyStrings","sql","join","values","countStatementCreator","createStatement"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,qB;AACjB,mCAAYC,SAAZ,EAAuB;AAAA;;AAEnB,YAAIA,aAAa,IAAjB,EAAuB;AACnB,kBAAM,IAAIC,KAAJ,CAAU,4DAAV,CAAN;AACH;;AAED,aAAKD,SAAL,GAAiBA,SAAjB;AACH;;;;uCAOa;AACV,mBAAOE,sBAAYC,UAAZ,CAAuB,KAAKH,SAAL,CAAeI,KAAf,CAAqBC,IAA5C,CAAP;AACH;;;iDAEwBC,U,EAAY;AACjC,mBAAOA,WAAWC,MAAX,CAAkB,UAACC,IAAD,EAAU;AAC/B,uBAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,KAAKC,MAAL,GAAc,CAAjD;AACH,aAFM,CAAP;AAGH;;;yCAEgB;AACb,gBAAMC,UAAU,IAAIC,oBAAJ,EAAhB;AACA,mBAAOD,QAAQE,qBAAR,CAA8B,KAAKZ,SAAL,CAAeI,KAAf,CAAqBE,UAAnD,CAAP;AACH;;;0CAEiB;AACd,6CAA+B,KAAKO,YAAL,EAA/B;AACH;;;0CAEiB;AACd,gBAAMC,YAAY,KAAKC,eAAL,EAAlB;AACA,gBAAMC,WAAW,KAAKC,cAAL,EAAjB;AACA,gBAAMX,aAAa,EAAnB;;AAEAA,uBAAWY,IAAX,CAAgBJ,SAAhB;;AAEA,gBAAIE,YAAY,EAAhB,EAAoB;AAChBV,2BAAWY,IAAX,CAAgBF,QAAhB;AACH;;AAED,gBAAMG,oBAAoB,KAAKC,wBAAL,CAA8Bd,UAA9B,CAA1B;;AAEA,mBAAO;AACHe,qBAAKF,kBAAkBG,IAAlB,CAAuB,GAAvB,CADF;AAEHC,wBAAQ;AAFL,aAAP;AAIH;;;wCAzCsBvB,S,EAAU;AAC7B,gBAAMwB,wBAAwB,IAAIzB,qBAAJ,CAA0BC,SAA1B,CAA9B;AACA,mBAAOwB,sBAAsBC,eAAtB,EAAP;AACH;;;;;;kBAbgB1B,qB","file":"CountStatementCreator.js","sourcesContent":["import SqlVisitor from \"../visitors/SqlVisitor\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\n\nexport default class CountStatementCreator {\n    constructor(queryable) {\n\n        if (queryable == null) {\n            throw new Error(\"Null Exception: A queryable is needed to create statement.\");\n        }\n\n        this.queryable = queryable;\n    }\n\n    static createStatement(queryable){\n        const countStatementCreator = new CountStatementCreator(queryable);\n        return countStatementCreator.createStatement();\n    }\n\n    getTableName(){\n        return SqliteUtils.escapeName(this.queryable.query.type);\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    createWhereSql() {\n        const visitor = new SqlVisitor();\n        return visitor.createWhereExpression(this.queryable.query.expression);\n    }\n\n    createSelectSql() {\n        return `SELECT count(*) FROM ${this.getTableName()}`;\n    }\n\n    createStatement() {\n        const selectSql = this.createSelectSql();\n        const whereSql = this.createWhereSql();\n        const expression = []\n\n        expression.push(selectSql);\n\n        if (whereSql != \"\") {\n            expression.push(whereSql);\n        }\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        return {\n            sql: cleanedExpression.join(\" \"),\n            values: []\n        }\n    }\n\n}"]}