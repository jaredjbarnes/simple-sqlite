{"version":3,"sources":["../../../src/sqlite/statements/SelectStatementCreator.js"],"names":["SelectStatementCreator","queryable","Error","SqliteUtils","escapeName","type","expression","filter","part","length","visitor","SqlVisitor","createWhereExpression","query","select","columns","Object","keys","map","key","join","getTableName","orderBy","series","column","limit","offset","Infinity","selectSql","createSelectSql","whereSql","orderBySql","createOrderBySql","limitAndOffsetSql","createLimitAndOffsetSql","push","cleanedExpression","removeNullOrEmptyStrings","sql","values","selectStatementCreator","createStatement"],"mappings":"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","file":"SelectStatementCreator.js","sourcesContent":["import SqlVisitor from \"../visitors/SqlVisitor\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\n\nexport default class SelectStatementCreator {\n    constructor(queryable) {\n\n        if (queryable == null) {\n            throw new Error(\"Null Exception: A queryable is needed to create statement.\");\n        }\n\n        this.queryable = queryable;\n    }\n\n    static createStatement(queryable){\n        const selectStatementCreator = new SelectStatementCreator(queryable);\n        return selectStatementCreator.createStatement();\n    }\n\n    getTableName(){\n        return SqliteUtils.escapeName(this.queryable.type);\n    }\n\n    removeNullOrEmptyStrings(expression) {\n        return expression.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n    }\n\n    createWhereExpression() {\n        const visitor = new SqlVisitor();\n        return visitor.createWhereExpression(this.queryable.query.expression);\n    }\n\n    createSelectSql() {\n        const select = this.queryable.query.select;\n        let columns = Object.keys(select).map((key) => {\n            return `${key} AS ${select[key]}`;\n        });\n\n        if (columns.length === 0) {\n            columns = [\"*\"];\n        }\n\n        return `SELECT ${columns.join(\", \")} FROM ${this.getTableName()}`;\n    }\n\n    createOrderBySql() {\n        if (this.queryable.query.orderBy.length === 0) {\n            return \"\";\n        }\n\n        const series = this.queryable.query.orderBy.map((orderBy) => {\n            return `${SqliteUtils.escapeName(orderBy.column)} ${orderBy.type}`;\n        }).join(\", \");\n\n        return `ORDER BY ${series}`;\n    }\n\n    createLimitAndOffsetSql() {\n        let limit = this.queryable.query.limit;\n        let offset = this.queryable.query.offset;\n\n        if (limit === Infinity) {\n            limit = -1;\n        }\n\n        return `LIMIT ${limit} OFFSET ${offset}`;\n    }\n\n    createStatement() {\n        const selectSql = this.createSelectSql();\n        const whereSql = this.createWhereExpression();\n        const orderBySql = this.createOrderBySql();\n        const limitAndOffsetSql = this.createLimitAndOffsetSql();\n        const expression = [];\n\n        expression.push(selectSql);\n\n        if (whereSql != \"\") {\n            expression.push(whereSql);\n        }\n\n        if (orderBySql != \"\") {\n            expression.push(orderBySql);\n        }\n\n        if (limitAndOffsetSql != \"\") {\n            expression.push(limitAndOffsetSql);\n        }\n\n        const cleanedExpression = this.removeNullOrEmptyStrings(expression);\n\n        return {\n            sql: cleanedExpression.join(\" \"),\n            values: []\n        }\n    }\n\n}"]}