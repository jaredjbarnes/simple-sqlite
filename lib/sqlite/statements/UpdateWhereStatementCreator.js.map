{"version":3,"sources":["../../../src/sqlite/statements/UpdateWhereStatementCreator.js"],"names":["UpdateWhereStatementCreator","constructor","queryable","updates","Error","createStatement","updateWhereStatementCreator","getTableName","SqliteUtils","escapeName","query","type","createWhereExpression","visitor","SqlVisitor","expression","createSetExpression","keys","Object","statement","reduce","accumulator","key","placeHolderValues","push","values","sql","join","updateStatement","whereStatement"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,MAAMA,2BAAN,CAAkC;AAC7CC,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAE5B,QAAID,SAAS,IAAI,IAAjB,EAAuB;AACnB,YAAM,IAAIE,KAAJ,CAAU,qEAAV,CAAN;AACH;;AAED,QAAID,OAAO,IAAI,IAAf,EAAoB;AAChB,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACH;;AAED,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACH;;AAED,SAAOG,eAAP,CAAuBH,SAAvB,EAAkCC,OAAlC,EAA0C;AACtC,UAAMG,2BAA2B,GAAG,IAAIN,2BAAJ,CAAgCE,SAAhC,EAA2CC,OAA3C,CAApC;AACA,WAAOG,2BAA2B,CAACD,eAA5B,EAAP;AACH;;AAEDE,EAAAA,YAAY,GAAE;AACV,WAAOC,qBAAYC,UAAZ,CAAuB,KAAKP,SAAL,CAAeQ,KAAf,CAAqBC,IAA5C,CAAP;AACH;;AAEDC,EAAAA,qBAAqB,GAAG;AACpB,UAAMC,OAAO,GAAG,IAAIC,mBAAJ,EAAhB;AACA,WAAOD,OAAO,CAACD,qBAAR,CAA8B,KAAKV,SAAL,CAAeQ,KAAf,CAAqBK,UAAnD,CAAP;AACH;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,UAAMb,OAAO,GAAG,KAAKA,OAArB;AACA,UAAMc,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYd,OAAZ,CAAb;AAEA,UAAMgB,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAY,CAACC,WAAD,EAAcC,GAAd,KAAsB;AAChD,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AACd,eAAOD,WAAP;AACH;;AAEDA,MAAAA,WAAW,CAACE,iBAAZ,CAA8BC,IAA9B,CAAoC,GAAEhB,qBAAYC,UAAZ,CAAuBa,GAAvB,CAA4B,MAAlE;AACAD,MAAAA,WAAW,CAACI,MAAZ,CAAmBD,IAAnB,CAAwBrB,OAAO,CAACmB,GAAD,CAA/B;AACA,aAAOD,WAAP;AACH,KARiB,EAQf;AAAEE,MAAAA,iBAAiB,EAAE,EAArB;AAAyBE,MAAAA,MAAM,EAAE;AAAjC,KARe,CAAlB;AAUA,WAAO;AACHC,MAAAA,GAAG,EAAG,UAAS,KAAKnB,YAAL,EAAoB,QAAOY,SAAS,CAACI,iBAAV,CAA4BI,IAA5B,CAAiC,IAAjC,CAAuC,EAD9E;AAEHF,MAAAA,MAAM,EAAEN,SAAS,CAACM;AAFf,KAAP;AAKH;;AAEDpB,EAAAA,eAAe,GAAG;AACd,UAAMF,OAAO,GAAG,KAAKA,OAArB;AACA,UAAMyB,eAAe,GAAG,KAAKZ,mBAAL,CAAyBb,OAAzB,CAAxB;AACA,UAAM0B,cAAc,GAAG,KAAKjB,qBAAL,EAAvB;AAEA,QAAIc,GAAG,GAAGE,eAAe,CAACF,GAA1B;;AAEA,QAAIG,cAAc,IAAI,EAAtB,EAA0B;AACtBH,MAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGG,cAAe,EAA/B;AACH;;AAED,WAAO;AACHH,MAAAA,GADG;AAEHD,MAAAA,MAAM,EAAEG,eAAe,CAACH;AAFrB,KAAP;AAIH;;AAjE4C","sourcesContent":["import SqlVisitor from \"../visitors/SqlVisitor\";\nimport SqliteUtils from \"../utils/SqliteUtils\";\nimport { timingSafeEqual } from \"crypto\";\n\nexport default class UpdateWhereStatementCreator {\n    constructor(queryable, updates) {\n\n        if (queryable == null) {\n            throw new Error(\"Null Argument Exception: A queryable is needed to create statement.\");\n        }\n\n        if (updates == null){\n            throw new Error(\"Null Argument Exception: updates cannot be null.\");\n        }\n\n        this.updates = updates;\n        this.queryable = queryable;\n    }\n\n    static createStatement(queryable, updates){\n        const updateWhereStatementCreator = new UpdateWhereStatementCreator(queryable, updates);\n        return updateWhereStatementCreator.createStatement();\n    }\n\n    getTableName(){\n        return SqliteUtils.escapeName(this.queryable.query.type);\n    }\n\n    createWhereExpression() {\n        const visitor = new SqlVisitor();\n        return visitor.createWhereExpression(this.queryable.query.expression);\n    }\n\n    createSetExpression() {\n        const updates = this.updates;\n        const keys = Object.keys(updates);\n\n        const statement = keys.reduce((accumulator, key) => {\n            if (key === \"id\") {\n                return accumulator;\n            }\n\n            accumulator.placeHolderValues.push(`${SqliteUtils.escapeName(key)} = ?`);\n            accumulator.values.push(updates[key]);\n            return accumulator;\n        }, { placeHolderValues: [], values: [] });\n\n        return {\n            sql: `UPDATE ${this.getTableName()} SET ${statement.placeHolderValues.join(\", \")}`,\n            values: statement.values\n        }\n\n    }\n\n    createStatement() {\n        const updates = this.updates;\n        const updateStatement = this.createSetExpression(updates);\n        const whereStatement = this.createWhereExpression();\n\n        let sql = updateStatement.sql;\n\n        if (whereStatement != \"\") {\n            sql = `${sql} ${whereStatement}`;\n        }\n\n        return {\n            sql,\n            values: updateStatement.values\n        }\n    }\n}"],"file":"UpdateWhereStatementCreator.js"}