{"version":3,"sources":["../../../src/sqlite/statements/UpdateStatementCreator.js"],"names":["UpdateStatementCreator","entity","keys","Object","validateEntityPrimaryKeys","Error","sqliteData","reduce","accumulator","key","primaryKeys","includes","placeHolderValues","push","SqliteUtils","escapeName","values","whereStatement","createWhereExpression","sql","tableName","join","options","updateStatementCreator","createStatement","AbstractStatementCreator"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,sB;;;;;;;;;;;0CAOC;AAAA;;AACd,gBAAMC,SAAS,KAAKA,MAApB;AACA,gBAAMC,OAAOC,OAAOD,IAAP,CAAYD,MAAZ,CAAb;;AAEA,gBAAI,CAAC,KAAKG,yBAAL,EAAL,EAAuC;AACnC,sBAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,gBAAMC,aAAaJ,KAAKK,MAAL,CAAY,UAACC,WAAD,EAAcC,GAAd,EAAsB;AACjD,oBAAI,OAAKC,WAAL,CAAiBC,QAAjB,CAA0BF,GAA1B,CAAJ,EAAoC;AAChC,2BAAOD,WAAP;AACH;;AAEDA,4BAAYI,iBAAZ,CAA8BC,IAA9B,CAAsCC,sBAAYC,UAAZ,CAAuBN,GAAvB,CAAtC;AACAD,4BAAYQ,MAAZ,CAAmBH,IAAnB,CAAwBZ,OAAOQ,GAAP,CAAxB;AACA,uBAAOD,WAAP;AACH,aARkB,EAQhB,EAAEI,mBAAmB,EAArB,EAAyBI,QAAQ,EAAjC,EARgB,CAAnB;;AAUA,gBAAMC,iBAAiB,KAAKC,qBAAL,EAAvB;;AAEA,mBAAO;AACHC,iCAAeL,sBAAYC,UAAZ,CAAuB,KAAKK,SAA5B,CAAf,aAA6Dd,WAAWM,iBAAX,CAA6BS,IAA7B,CAAkC,IAAlC,CAA7D,SAAwGJ,cADrG;AAEHD,wBAAQV,WAAWU;AAFhB,aAAP;AAIH;;;wCA7BsBM,O,EAAQ;AAC3B,gBAAMC,yBAAyB,IAAIvB,sBAAJ,CAA2BsB,OAA3B,CAA/B;AACA,mBAAOC,uBAAuBC,eAAvB,EAAP;AACH;;;;EAL+CC,kC;;kBAA/BzB,sB","file":"UpdateStatementCreator.js","sourcesContent":["import SqliteUtils from \"../utils/SqliteUtils\";\nimport AbstractStatementCreator from \"./AbstractStatementCreator\";\n\nexport default class UpdateStatementCreator extends AbstractStatementCreator {\n\n    static createStatement(options){\n        const updateStatementCreator = new UpdateStatementCreator(options);\n        return updateStatementCreator.createStatement(); \n    }\n\n    createStatement() {\n        const entity = this.entity;\n        const keys = Object.keys(entity);\n\n        if (!this.validateEntityPrimaryKeys()) {\n            throw new Error(\"Cannot update entity: Invalid primary key(s).\");\n        }\n\n        const sqliteData = keys.reduce((accumulator, key) => {\n            if (this.primaryKeys.includes(key)) {\n                return accumulator;\n            }\n\n            accumulator.placeHolderValues.push(`${SqliteUtils.escapeName(key)} = ?`);\n            accumulator.values.push(entity[key]);\n            return accumulator;\n        }, { placeHolderValues: [], values: [] });\n\n        const whereStatement = this.createWhereExpression();\n\n        return {\n            sql: `UPDATE ${SqliteUtils.escapeName(this.tableName)} SET ${sqliteData.placeHolderValues.join(\", \")} ${whereStatement}`,\n            values: sqliteData.values\n        }\n    }\n}"]}