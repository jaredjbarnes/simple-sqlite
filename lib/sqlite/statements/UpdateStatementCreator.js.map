{"version":3,"sources":["../../../src/sqlite/statements/UpdateStatementCreator.js"],"names":["UpdateStatementCreator","AbstractStatementCreator","createStatement","options","updateStatementCreator","entity","keys","Object","validateEntityPrimaryKeys","Error","sqliteData","reduce","accumulator","key","primaryKeys","includes","placeHolderValues","push","SqliteUtils","escapeName","values","whereStatement","createWhereExpression","sql","tableName","join"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,sBAAN,SAAqCC,iCAArC,CAA8D;AAEzE,SAAOC,eAAP,CAAuBC,OAAvB,EAA+B;AAC3B,UAAMC,sBAAsB,GAAG,IAAIJ,sBAAJ,CAA2BG,OAA3B,CAA/B;AACA,WAAOC,sBAAsB,CAACF,eAAvB,EAAP;AACH;;AAEDA,EAAAA,eAAe,GAAG;AACd,UAAMG,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,MAAZ,CAAb;;AAEA,QAAI,CAAC,KAAKG,yBAAL,EAAL,EAAuC;AACnC,YAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,UAAMC,UAAU,GAAGJ,IAAI,CAACK,MAAL,CAAY,CAACC,WAAD,EAAcC,GAAd,KAAsB;AACjD,UAAI,KAAKC,WAAL,CAAiBC,QAAjB,CAA0BF,GAA1B,CAAJ,EAAoC;AAChC,eAAOD,WAAP;AACH;;AAEDA,MAAAA,WAAW,CAACI,iBAAZ,CAA8BC,IAA9B,CAAoC,GAAEC,qBAAYC,UAAZ,CAAuBN,GAAvB,CAA4B,MAAlE;AACAD,MAAAA,WAAW,CAACQ,MAAZ,CAAmBH,IAAnB,CAAwBZ,MAAM,CAACQ,GAAD,CAA9B;AACA,aAAOD,WAAP;AACH,KARkB,EAQhB;AAAEI,MAAAA,iBAAiB,EAAE,EAArB;AAAyBI,MAAAA,MAAM,EAAE;AAAjC,KARgB,CAAnB;AAUA,UAAMC,cAAc,GAAG,KAAKC,qBAAL,EAAvB;AAEA,WAAO;AACHC,MAAAA,GAAG,EAAG,UAASL,qBAAYC,UAAZ,CAAuB,KAAKK,SAA5B,CAAuC,QAAOd,UAAU,CAACM,iBAAX,CAA6BS,IAA7B,CAAkC,IAAlC,CAAwC,IAAGJ,cAAe,EADpH;AAEHD,MAAAA,MAAM,EAAEV,UAAU,CAACU;AAFhB,KAAP;AAIH;;AA/BwE","sourcesContent":["import SqliteUtils from \"../utils/SqliteUtils\";\nimport AbstractStatementCreator from \"./AbstractStatementCreator\";\n\nexport default class UpdateStatementCreator extends AbstractStatementCreator {\n\n    static createStatement(options){\n        const updateStatementCreator = new UpdateStatementCreator(options);\n        return updateStatementCreator.createStatement(); \n    }\n\n    createStatement() {\n        const entity = this.entity;\n        const keys = Object.keys(entity);\n\n        if (!this.validateEntityPrimaryKeys()) {\n            throw new Error(\"Cannot update entity: Invalid primary key(s).\");\n        }\n\n        const sqliteData = keys.reduce((accumulator, key) => {\n            if (this.primaryKeys.includes(key)) {\n                return accumulator;\n            }\n\n            accumulator.placeHolderValues.push(`${SqliteUtils.escapeName(key)} = ?`);\n            accumulator.values.push(entity[key]);\n            return accumulator;\n        }, { placeHolderValues: [], values: [] });\n\n        const whereStatement = this.createWhereExpression();\n\n        return {\n            sql: `UPDATE ${SqliteUtils.escapeName(this.tableName)} SET ${sqliteData.placeHolderValues.join(\", \")} ${whereStatement}`,\n            values: sqliteData.values\n        }\n    }\n}"],"file":"UpdateStatementCreator.js"}