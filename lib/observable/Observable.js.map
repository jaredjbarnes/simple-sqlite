{"version":3,"sources":["../../src/observable/Observable.js"],"names":["Observable","observers","event","forEach","observer","notify","type","callback","Observer","unbind","index","indexOf","splice"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,U;AACjB,0BAAc;AAAA;;AACV,aAAKC,SAAL,GAAiB,EAAjB;AACH;;;;+BAEMC,K,EAAM;AACT,iBAAKD,SAAL,CAAeE,OAAf,CAAuB,UAACC,QAAD,EAAY;AAC/BA,yBAASC,MAAT,CAAgBH,KAAhB;AACH,aAFD;AAGH;;;gCAEOI,I,EAAMC,Q,EAAU;AAAA;;AACpB,gBAAMH,WAAW,IAAII,kBAAJ,CAAa;AAC1BF,0BAD0B;AAE1BC,kCAF0B;AAG1BE,wBAAQ,kBAAM;AACV,wBAAMC,QAAQ,MAAKT,SAAL,CAAeU,OAAf,CAAuBP,QAAvB,CAAd;;AAEA,wBAAIM,SAAS,CAAb,EAAgB;AACZ,8BAAKT,SAAL,CAAeW,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B;AACH;AACJ;AATyB,aAAb,CAAjB;;AAYA,mBAAON,QAAP;AACH;;;;;;kBAzBgBJ,U","file":"Observable.js","sourcesContent":["import Observer from \"./Observer\";\n\nexport default class Observable {\n    constructor() {\n        this.observers = [];\n    }\n\n    notify(event){\n        this.observers.forEach((observer)=>{\n            observer.notify(event);\n        });\n    }\n\n    observe(type, callback) {\n        const observer = new Observer({\n            type,\n            callback,\n            unbind: () => {\n                const index = this.observers.indexOf(observer);\n\n                if (index >= 0) {\n                    this.observers.splice(index, 1);\n                }\n            }\n        });\n\n        return observer;\n    }\n}"]}