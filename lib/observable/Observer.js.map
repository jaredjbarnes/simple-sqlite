{"version":3,"sources":["../../src/observable/Observer.js"],"names":["states","ON","STOPPED","DISPOSED","Observer","constructor","type","callback","unbind","Error","state","isType","event","willNotify","notify","stop","start","dispose"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAG;AACXC,EAAAA,EAAE,EAAE,IADO;AAEXC,EAAAA,OAAO,EAAE,SAFE;AAGXC,EAAAA,QAAQ,EAAE;AAHC,CAAf;;AAMe,MAAMC,QAAN,CAAe;AAC1BC,EAAAA,WAAW,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA;AAAjB,GAAD,EAA0B;AACjC,QAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACH;;AAED,QAAI,OAAOF,QAAP,KAAoB,UAAxB,EAAmC;AAC/B,YAAM,IAAIE,KAAJ,CAAU,oDAAV,CAAN;AACH;;AAED,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKE,KAAL,GAAaV,MAAM,CAACC,EAApB;AACH;;AAEDU,EAAAA,MAAM,CAACC,KAAD,EAAO;AACT,WAAO,KAAKN,IAAL,KAAcM,KAAK,CAACN,IAApB,IAA4BM,KAAK,CAACN,IAAN,IAAc,IAAjD;AACH;;AAEDO,EAAAA,UAAU,CAACD,KAAD,EAAO;AACb,WAAO,KAAKD,MAAL,CAAYC,KAAZ,KAAsB,KAAKF,KAAL,IAAcA,KAAK,CAACT,EAAjD;AACH;;AAEDa,EAAAA,MAAM,CAACF,KAAD,EAAO;AACT,QAAI,KAAKC,UAAL,CAAgBD,KAAhB,CAAJ,EAA2B;AACvB,WAAKL,QAAL,CAAcK,KAAd;AACH;AACJ;;AAEDG,EAAAA,IAAI,GAAE;AACF,QAAI,KAAKL,KAAL,KAAeV,MAAM,CAACC,EAA1B,EAA6B;AACzB,WAAKS,KAAL,GAAaV,MAAM,CAACE,OAApB;AACH;AACJ;;AAEDc,EAAAA,KAAK,GAAE;AACH,QAAI,KAAKN,KAAL,KAAeV,MAAM,CAACE,OAA1B,EAAkC;AAC9B,WAAKQ,KAAL,GAAaV,MAAM,CAACC,EAApB;AACH;AACJ;;AAEDgB,EAAAA,OAAO,GAAE;AACL,QAAI,KAAKP,KAAL,KAAeV,MAAM,CAACG,QAA1B,EAAmC;AAC/B,WAAKO,KAAL,GAAaV,MAAM,CAACG,QAApB;AACA,WAAKK,MAAL;AACH;AACJ;;AA/CyB","sourcesContent":["const states = {\n    ON: \"ON\",\n    STOPPED: \"STOPPED\",\n    DISPOSED: \"DISPOSED\"\n};\n\nexport default class Observer {\n    constructor({type, callback, unbind}){\n        if (typeof unbind !== \"function\"){\n            throw new Error(\"Illegal Argument: unbind needs to be a function.\");\n        }\n\n        if (typeof callback !== \"function\"){\n            throw new Error(\"Illegal Argument: callback needs to be a function.\");\n        }\n\n        this.type = type;\n        this.callback = callback;\n        this.unbind = unbind;\n        this.state = states.ON;\n    }\n\n    isType(event){\n        return this.type === event.type || event.type == null;\n    }\n\n    willNotify(event){\n        return this.isType(event) && this.state == state.ON;\n    }\n\n    notify(event){\n        if (this.willNotify(event)){\n            this.callback(event);\n        }\n    }\n\n    stop(){\n        if (this.state === states.ON){\n            this.state = states.STOPPED;\n        }\n    }\n\n    start(){\n        if (this.state === states.STOPPED){\n            this.state = states.ON;\n        }\n    }\n\n    dispose(){\n        if (this.state !== states.DISPOSED){\n            this.state = states.DISPOSED;\n            this.unbind();\n        }\n    }\n}"],"file":"Observer.js"}