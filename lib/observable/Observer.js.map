{"version":3,"sources":["../../src/observable/Observer.js"],"names":["states","ON","STOPPED","DISPOSED","Observer","type","callback","unbind","Error","state","event","isType","willNotify"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS;AACXC,QAAI,IADO;AAEXC,aAAS,SAFE;AAGXC,cAAU;AAHC,CAAf;;IAMqBC,Q;AACjB,4BAAqC;AAAA,YAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,YAAlBC,QAAkB,QAAlBA,QAAkB;AAAA,YAARC,MAAQ,QAARA,MAAQ;;AAAA;;AACjC,YAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAiC;AAC7B,kBAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACH;;AAED,YAAI,OAAOF,QAAP,KAAoB,UAAxB,EAAmC;AAC/B,kBAAM,IAAIE,KAAJ,CAAU,oDAAV,CAAN;AACH;;AAED,aAAKH,IAAL,GAAYA,IAAZ;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKE,KAAL,GAAaT,OAAOC,EAApB;AACH;;;;+BAEMS,K,EAAM;AACT,mBAAO,KAAKL,IAAL,KAAcK,MAAML,IAApB,IAA4BK,MAAML,IAAN,IAAc,IAAjD;AACH;;;mCAEUK,K,EAAM;AACb,mBAAO,KAAKC,MAAL,CAAYD,KAAZ,KAAsB,KAAKD,KAAL,IAAcA,MAAMR,EAAjD;AACH;;;+BAEMS,K,EAAM;AACT,gBAAI,KAAKE,UAAL,CAAgBF,KAAhB,CAAJ,EAA2B;AACvB,qBAAKJ,QAAL,CAAcI,KAAd;AACH;AACJ;;;+BAEK;AACF,gBAAI,KAAKD,KAAL,KAAeT,OAAOC,EAA1B,EAA6B;AACzB,qBAAKQ,KAAL,GAAaT,OAAOE,OAApB;AACH;AACJ;;;gCAEM;AACH,gBAAI,KAAKO,KAAL,KAAeT,OAAOE,OAA1B,EAAkC;AAC9B,qBAAKO,KAAL,GAAaT,OAAOC,EAApB;AACH;AACJ;;;kCAEQ;AACL,gBAAI,KAAKQ,KAAL,KAAeT,OAAOG,QAA1B,EAAmC;AAC/B,qBAAKM,KAAL,GAAaT,OAAOG,QAApB;AACA,qBAAKI,MAAL;AACH;AACJ;;;;;;kBA/CgBH,Q","file":"Observer.js","sourcesContent":["const states = {\n    ON: \"ON\",\n    STOPPED: \"STOPPED\",\n    DISPOSED: \"DISPOSED\"\n};\n\nexport default class Observer {\n    constructor({type, callback, unbind}){\n        if (typeof unbind !== \"function\"){\n            throw new Error(\"Illegal Argument: unbind needs to be a function.\");\n        }\n\n        if (typeof callback !== \"function\"){\n            throw new Error(\"Illegal Argument: callback needs to be a function.\");\n        }\n\n        this.type = type;\n        this.callback = callback;\n        this.unbind = unbind;\n        this.state = states.ON;\n    }\n\n    isType(event){\n        return this.type === event.type || event.type == null;\n    }\n\n    willNotify(event){\n        return this.isType(event) && this.state == state.ON;\n    }\n\n    notify(event){\n        if (this.willNotify(event)){\n            this.callback(event);\n        }\n    }\n\n    stop(){\n        if (this.state === states.ON){\n            this.state = states.STOPPED;\n        }\n    }\n\n    start(){\n        if (this.state === states.STOPPED){\n            this.state = states.ON;\n        }\n    }\n\n    dispose(){\n        if (this.state !== states.DISPOSED){\n            this.state = states.DISPOSED;\n            this.unbind();\n        }\n    }\n}"]}