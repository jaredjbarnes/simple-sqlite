{"version":3,"sources":["../../src/queryable/NodeFactory.js"],"names":["NodeFactory","constructor","createAndNode","CompositeNode","createOrNode","createOperatorNode","itemType","propertyName","operation","value","node","valueNode","createValueNode","propertyNode","createPropertyNode","children","push","name","typeNode","ValueNode","nameNode","fromValue"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,GAAG,CAAG;;AAEjBC,EAAAA,aAAa,GAAG;AACZ,WAAO,IAAIC,sBAAJ,CAAkB,KAAlB,CAAP;AACH;;AAEDC,EAAAA,YAAY,GAAG;AACX,WAAO,IAAID,sBAAJ,CAAkB,IAAlB,CAAP;AACH;;AAEDE,EAAAA,kBAAkB,CACdC,QADc,EAEdC,YAFc,EAGdC,SAHc,EAIdC,KAJc,EAKhB;AACE,UAAMC,IAAI,GAAG,IAAIP,sBAAJ,CAAkBK,SAAlB,CAAb;AACA,UAAMG,SAAS,GAAG,KAAKC,eAAL,CAAqBH,KAArB,CAAlB;AACA,UAAMI,YAAY,GAAG,KAAKC,kBAAL,CAAwBR,QAAxB,EAAkCC,YAAlC,CAArB;AAEAG,IAAAA,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmBH,YAAnB,EAAiCF,SAAjC;AAEA,WAAOD,IAAP;AACH;;AAEDI,EAAAA,kBAAkB,CAACR,QAAD,EAAWW,IAAX,EAAiB;AAC/B,UAAMJ,YAAY,GAAG,IAAIV,sBAAJ,CAAkB,UAAlB,CAArB;AAEA,UAAMe,QAAQ,GAAG,IAAIC,kBAAJ,CAAc,MAAd,EAAsBb,QAAtB,CAAjB;AACA,UAAMc,QAAQ,GAAG,IAAID,kBAAJ,CAAc,cAAd,EAA8BF,IAA9B,CAAjB;AAEAJ,IAAAA,YAAY,CAACE,QAAb,CAAsBC,IAAtB,CAA2BE,QAA3B,EAAqCE,QAArC;AAEA,WAAOP,YAAP;AACH;;AAEDD,EAAAA,eAAe,CAACH,KAAD,EAAQ;AACnB,WAAOU,mBAAUE,SAAV,CAAoBZ,KAApB,CAAP;AACH;;AAvC4B","sourcesContent":["import ValueNode from \"./abstractSyntaxTree/ValueNode\";\nimport CompositeNode from \"./abstractSyntaxTree/CompositeNode\";\n\nexport default class NodeFactory {\n    constructor() { }\n\n    createAndNode() {\n        return new CompositeNode(\"and\");\n    }\n\n    createOrNode() {\n        return new CompositeNode(\"or\");\n    }\n\n    createOperatorNode(\n        itemType,\n        propertyName,\n        operation,\n        value\n    ) {\n        const node = new CompositeNode(operation);\n        const valueNode = this.createValueNode(value);\n        const propertyNode = this.createPropertyNode(itemType, propertyName);\n\n        node.children.push(propertyNode, valueNode);\n\n        return node;\n    }\n\n    createPropertyNode(itemType, name) {\n        const propertyNode = new CompositeNode(\"property\");\n\n        const typeNode = new ValueNode(\"type\", itemType);\n        const nameNode = new ValueNode(\"propertyName\", name);\n\n        propertyNode.children.push(typeNode, nameNode);\n\n        return propertyNode;\n    }\n\n    createValueNode(value) {\n        return ValueNode.fromValue(value);\n    }\n}"],"file":"NodeFactory.js"}