{"version":3,"sources":["../../src/queryable/NodeFactory.js"],"names":["NodeFactory","CompositeNode","itemType","propertyName","operation","value","node","valueNode","createValueNode","propertyNode","createPropertyNode","children","push","name","typeNode","ValueNode","nameNode","Queryable","fromValue"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,W;AACjB,2BAAc;AAAA;AAAG;;;;wCAED;AACZ,mBAAO,IAAIC,uBAAJ,CAAkB,KAAlB,CAAP;AACH;;;uCAEc;AACX,mBAAO,IAAIA,uBAAJ,CAAkB,IAAlB,CAAP;AACH;;;2CAGGC,Q,EACAC,Y,EACAC,S,EACAC,K,EACF;AACE,gBAAMC,OAAO,IAAIL,uBAAJ,CAAkBG,SAAlB,CAAb;AACA,gBAAMG,YAAY,KAAKC,eAAL,CAAqBH,KAArB,CAAlB;AACA,gBAAMI,eAAe,KAAKC,kBAAL,CAAwBR,QAAxB,EAAkCC,YAAlC,CAArB;;AAEAG,iBAAKK,QAAL,CAAcC,IAAd,CAAmBH,YAAnB,EAAiCF,SAAjC;;AAEA,mBAAOD,IAAP;AACH;;;2CAEkBJ,Q,EAAUW,I,EAAM;AAC/B,gBAAMJ,eAAe,IAAIR,uBAAJ,CAAkB,UAAlB,CAArB;;AAEA,gBAAMa,WAAW,IAAIC,mBAAJ,CAAc,MAAd,EAAsBb,QAAtB,CAAjB;AACA,gBAAMc,WAAW,IAAID,mBAAJ,CAAc,cAAd,EAA8BF,IAA9B,CAAjB;;AAEAJ,yBAAaE,QAAb,CAAsBC,IAAtB,CAA2BE,QAA3B,EAAqCE,QAArC;;AAEA,mBAAOP,YAAP;AACH;;;wCAEeJ,K,EAAO;AACnB,gBAAIA,iBAAiBY,mBAArB,EAAgC;AAC5B,uBAAO,IAAIF,mBAAJ,CAAc,WAAd,EAA2BV,KAA3B,CAAP;AACH,aAFD,MAEO;AACH,uBAAOU,oBAAUG,SAAV,CAAoBb,KAApB,CAAP;AACH;AACJ;;;;;;kBA3CgBL,W","file":"NodeFactory.js","sourcesContent":["import ValueNode from \"./abstractSyntaxTree/ValueNode\";\nimport CompositeNode from \"./abstractSyntaxTree/CompositeNode\";\nimport Queryable from \"./Queryable\";\n\nexport default class NodeFactory {\n    constructor() { }\n\n    createAndNode() {\n        return new CompositeNode(\"and\");\n    }\n\n    createOrNode() {\n        return new CompositeNode(\"or\");\n    }\n\n    createOperatorNode(\n        itemType,\n        propertyName,\n        operation,\n        value\n    ) {\n        const node = new CompositeNode(operation);\n        const valueNode = this.createValueNode(value);\n        const propertyNode = this.createPropertyNode(itemType, propertyName);\n\n        node.children.push(propertyNode, valueNode);\n\n        return node;\n    }\n\n    createPropertyNode(itemType, name) {\n        const propertyNode = new CompositeNode(\"property\");\n\n        const typeNode = new ValueNode(\"type\", itemType);\n        const nameNode = new ValueNode(\"propertyName\", name);\n\n        propertyNode.children.push(typeNode, nameNode);\n\n        return propertyNode;\n    }\n\n    createValueNode(value) {\n        if (value instanceof Queryable) {\n            return new ValueNode(\"queryable\", value);\n        } else {\n            return ValueNode.fromValue(value);\n        }\n    }\n}"]}