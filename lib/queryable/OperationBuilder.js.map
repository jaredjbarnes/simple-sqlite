{"version":3,"sources":["../../src/queryable/OperationBuilder.js"],"names":["OperationBuilder","queryable","propertyName","factory","NodeFactory","value","Queryable","Array","isArray","Error","node","createOperatorNode","type","query","expression","children","push"],"mappings":"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","file":"OperationBuilder.js","sourcesContent":["import NodeFactory from \"./NodeFactory\";\nimport Queryable from \"./Queryable\";\n\nexport default class OperationBuilder {\n\n    constructor(queryable, propertyName) {\n        this.factory = new NodeFactory();\n        this.propertyName = propertyName;\n        this.queryable = queryable;\n    }\n\n    getQuery() {\n        return this.queryable;\n    }\n\n    isIn(value) {\n        if (!(value instanceof Queryable) && !Array.isArray(value)){\n            throw new Error(\"Invalid Argument: value needs to be an array or a queryable.\");\n        }\n\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isIn\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isNotIn(value) {\n        if (!(value instanceof Queryable) && !Array.isArray(value)){\n            throw new Error(\"Invalid Argument: value needs to be an array or a queryable.\");\n        }\n\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isNotIn\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    endsWith(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"endsWith\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    startsWith(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"startsWith\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    contains(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"contains\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isEqualTo(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isEqualTo\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isNotEqualTo(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isNotEqualTo\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isGreaterThan(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isGreaterThan\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isGreaterThanOrEqualTo(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isGreaterThanOrEqualTo\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isLessThan(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isLessThan\",\n            value\n        );\n\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n    isLessThanOrEqualTo(value) {\n        const node = this.factory.createOperatorNode(\n            this.queryable.type,\n            this.propertyName,\n            \"isLessThanOrEqualTo\",\n            value\n        );\n        if (this.queryable.query.expression && Array.isArray(this.queryable.query.expression.children)) {\n            this.queryable.query.expression.children.push(node);\n        } else {\n            this.queryable.query.expression = node;\n        }\n\n        return this.queryable;\n    }\n\n}"]}