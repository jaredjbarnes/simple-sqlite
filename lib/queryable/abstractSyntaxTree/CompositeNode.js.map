{"version":3,"sources":["../../../src/queryable/abstractSyntaxTree/CompositeNode.js"],"names":["CompositeNode","Node","constructor","type","isComposite","children","fromObject","object","node","Array","isArray","forEach","child","push","ValueNode","value","fromJson","json","JSON","parse","clone","map"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,aAAN,SAA4BC,aAA5B,CAAiC;AAC5CC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AAED,SAAOC,UAAP,CAAkBC,MAAlB,EAA0B;AACtB,QAAIC,IAAJ;;AAEA,QAAID,MAAM,IAAI,IAAd,EAAoB;AAChB,aAAO,IAAP;AACH;;AAED,QACI,OAAOA,MAAM,CAACH,WAAd,KAA8B,SAA9B,IACAG,MAAM,CAACH,WADP,IAEAK,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACF,QAArB,CAHJ,EAIE;AACEG,MAAAA,IAAI,GAAG,IAAIR,aAAJ,CAAkBO,MAAM,CAACJ,IAAzB,CAAP;AACAI,MAAAA,MAAM,CAACF,QAAP,CAAgBM,OAAhB,CAAyBC,KAAD,IAAW;AAC/B,eAAOJ,IAAI,CAACH,QAAL,CAAcQ,IAAd,CAAmBb,aAAa,CAACM,UAAd,CAAyBM,KAAzB,CAAnB,CAAP;AACH,OAFD;AAGH,KATD,MASO;AACHJ,MAAAA,IAAI,GAAG,IAAIM,kBAAJ,CAAcP,MAAM,CAACJ,IAArB,EAA2BI,MAAM,CAACQ,KAAlC,CAAP;AACH;;AAED,WAAOP,IAAP;AACH;;AAED,SAAOQ,QAAP,CAAgBC,IAAhB,EAAsB;AAClB,UAAMV,MAAM,GAAGW,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAf;AACA,WAAO,KAAKX,UAAL,CAAgBC,MAAhB,CAAP;AACH;;AAEDa,EAAAA,KAAK,GAAG;AACJ,UAAMZ,IAAI,GAAG,IAAIR,aAAJ,CAAkB,KAAKG,IAAvB,CAAb;AACAK,IAAAA,IAAI,CAACJ,WAAL,GAAmB,KAAKA,WAAxB;AAEA,UAAMC,QAAQ,GAAG,KAAKA,QAAL,CAAcgB,GAAd,CAAmBT,KAAD,IAAW;AAC1C,aAAOA,KAAK,CAACQ,KAAN,EAAP;AACH,KAFgB,CAAjB;AAIAZ,IAAAA,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AAEA,WAAOG,IAAP;AACH;;AA9C2C","sourcesContent":["import Node from \"./Node\";\nimport ValueNode from \"./ValueNode\";\n\nexport default class CompositeNode extends Node {\n    constructor(type) {\n        super(type);\n        this.isComposite = true;\n        this.children = [];\n    }\n\n    static fromObject(object) {\n        let node;\n\n        if (object == null) {\n            return null;\n        }\n\n        if (\n            typeof object.isComposite === \"boolean\" &&\n            object.isComposite &&\n            Array.isArray(object.children)\n        ) {\n            node = new CompositeNode(object.type);\n            object.children.forEach((child) => {\n                return node.children.push(CompositeNode.fromObject(child));\n            });\n        } else {\n            node = new ValueNode(object.type, object.value);\n        }\n\n        return node;\n    }\n\n    static fromJson(json) {\n        const object = JSON.parse(json);\n        return this.fromObject(object);\n    }\n\n    clone() {\n        const node = new CompositeNode(this.type);\n        node.isComposite = this.isComposite;\n\n        const children = this.children.map((child) => {\n            return child.clone();\n        });\n\n        node.children = children;\n\n        return node;\n    }\n}"],"file":"CompositeNode.js"}