{"version":3,"sources":["../../../src/queryable/abstractSyntaxTree/CompositeNode.js"],"names":["CompositeNode","type","isComposite","children","node","map","child","clone","object","forEach","push","fromObject","ValueNode","fromValue","value","json","JSON","parse","Node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,a;;;AACjB,2BAAYC,IAAZ,EAAkB;AAAA;;AAAA,kIACRA,IADQ;;AAEd,cAAKC,WAAL,GAAmB,IAAnB;AACA,cAAKC,QAAL,GAAgB,EAAhB;AAHc;AAIjB;;;;gCAsBO;AACJ,gBAAMC,OAAO,IAAIJ,aAAJ,CAAkB,KAAKC,IAAvB,CAAb;AACAG,iBAAKF,WAAL,GAAmB,KAAKA,WAAxB;;AAEA,gBAAMC,WAAW,KAAKA,QAAL,CAAcE,GAAd,CAAkB,UAACC,KAAD,EAAW;AAC1C,uBAAOA,MAAMC,KAAN,EAAP;AACH,aAFgB,CAAjB;;AAIAH,iBAAKD,QAAL,GAAgBA,QAAhB;;AAEA,mBAAOC,IAAP;AACH;;;mCA/BiBI,M,EAAQ;AACtB,gBAAIJ,aAAJ;;AAEA,gBAAI,OAAOI,OAAON,WAAd,KAA8B,SAA9B,IAA2CM,OAAON,WAAtD,EAAmE;AAC/DE,uBAAO,IAAIJ,aAAJ,CAAkBQ,OAAOP,IAAzB,CAAP;AACAG,qBAAKD,QAAL,CAAcM,OAAd,CAAsB,UAACH,KAAD,EAAW;AAC7B,2BAAOF,KAAKD,QAAL,CAAcO,IAAd,CAAmBV,cAAcW,UAAd,CAAyBL,KAAzB,CAAnB,CAAP;AACH,iBAFD;AAGH,aALD,MAKO;AACHF,uBAAOQ,oBAAUC,SAAV,CAAoBL,OAAOM,KAA3B,CAAP;AACH;;AAED,mBAAOV,IAAP;AACH;;;iCAEeW,I,EAAM;AAClB,gBAAMP,SAASQ,KAAKC,KAAL,CAAWF,IAAX,CAAf;AACA,mBAAO,KAAKJ,UAAL,CAAgBH,MAAhB,CAAP;AACH;;;;EAzBsCU,c;;kBAAtBlB,a","file":"CompositeNode.js","sourcesContent":["import Node from \"./Node\";\nimport ValueNode from \"./ValueNode\";\n\nexport default class CompositeNode extends Node {\n    constructor(type) {\n        super(type);\n        this.isComposite = true;\n        this.children = [];\n    }\n\n    static fromObject(object) {\n        let node;\n\n        if (typeof object.isComposite === \"boolean\" && object.isComposite) {\n            node = new CompositeNode(object.type);\n            node.children.forEach((child) => {\n                return node.children.push(CompositeNode.fromObject(child));\n            });\n        } else {\n            node = ValueNode.fromValue(object.value);\n        }\n\n        return node;\n    }\n\n    static fromJson(json) {\n        const object = JSON.parse(json);\n        return this.fromObject(object);\n    }\n\n    clone() {\n        const node = new CompositeNode(this.type);\n        node.isComposite = this.isComposite;\n\n        const children = this.children.map((child) => {\n            return child.clone();\n        });\n\n        node.children = children;\n\n        return node;\n    }\n}"]}