{"version":3,"sources":["../../../src/queryable/abstractSyntaxTree/CompositeNode.js"],"names":["CompositeNode","type","isComposite","children","node","map","child","clone","Node"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,a;;;AACjB,2BAAYC,IAAZ,EAAkB;AAAA;;AAAA,kIACRA,IADQ;;AAEd,cAAKC,WAAL,GAAmB,IAAnB;AACA,cAAKC,QAAL,GAAgB,EAAhB;AAHc;AAIjB;;;;gCAEM;AACH,gBAAMC,OAAO,IAAIJ,aAAJ,CAAkB,KAAKC,IAAvB,CAAb;AACAG,iBAAKF,WAAL,GAAmB,KAAKA,WAAxB;;AAEA,gBAAMC,WAAW,KAAKA,QAAL,CAAcE,GAAd,CAAkB,UAACC,KAAD,EAAS;AACxC,uBAAOA,MAAMC,KAAN,EAAP;AACH,aAFgB,CAAjB;;AAIAH,iBAAKD,QAAL,GAAgBA,QAAhB;;AAEA,mBAAOC,IAAP;AACH;;;;EAlBsCI,c;;kBAAtBR,a","file":"CompositeNode.js","sourcesContent":["import Node from \"./Node\";\n\nexport default class CompositeNode extends Node {\n    constructor(type) {\n        super(type);\n        this.isComposite = true;\n        this.children = [];\n    }\n\n    clone(){\n        const node = new CompositeNode(this.type);\n        node.isComposite = this.isComposite;\n\n        const children = this.children.map((child)=>{\n            return child.clone();\n        });\n\n        node.children = children;\n\n        return node;\n    }\n}"]}