{"version":3,"sources":["../../../src/queryable/abstractSyntaxTree/CompositeNode.js"],"names":["CompositeNode","type","isComposite","children","node","map","child","clone","object","Array","isArray","forEach","push","fromObject","ValueNode","value","json","JSON","parse","Node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,a;;;AACjB,2BAAYC,IAAZ,EAAkB;AAAA;;AAAA,kIACRA,IADQ;;AAEd,cAAKC,WAAL,GAAmB,IAAnB;AACA,cAAKC,QAAL,GAAgB,EAAhB;AAHc;AAIjB;;;;gCA8BO;AACJ,gBAAMC,OAAO,IAAIJ,aAAJ,CAAkB,KAAKC,IAAvB,CAAb;AACAG,iBAAKF,WAAL,GAAmB,KAAKA,WAAxB;;AAEA,gBAAMC,WAAW,KAAKA,QAAL,CAAcE,GAAd,CAAkB,UAACC,KAAD,EAAW;AAC1C,uBAAOA,MAAMC,KAAN,EAAP;AACH,aAFgB,CAAjB;;AAIAH,iBAAKD,QAAL,GAAgBA,QAAhB;;AAEA,mBAAOC,IAAP;AACH;;;mCAvCiBI,M,EAAQ;AACtB,gBAAIJ,aAAJ;;AAEA,gBAAII,UAAU,IAAd,EAAoB;AAChB,uBAAO,IAAP;AACH;;AAED,gBACI,OAAOA,OAAON,WAAd,KAA8B,SAA9B,IACAM,OAAON,WADP,IAEAO,MAAMC,OAAN,CAAcF,OAAOL,QAArB,CAHJ,EAIE;AACEC,uBAAO,IAAIJ,aAAJ,CAAkBQ,OAAOP,IAAzB,CAAP;AACAO,uBAAOL,QAAP,CAAgBQ,OAAhB,CAAwB,UAACL,KAAD,EAAW;AAC/B,2BAAOF,KAAKD,QAAL,CAAcS,IAAd,CAAmBZ,cAAca,UAAd,CAAyBP,KAAzB,CAAnB,CAAP;AACH,iBAFD;AAGH,aATD,MASO;AACHF,uBAAO,IAAIU,mBAAJ,CAAcN,OAAOP,IAArB,EAA2BO,OAAOO,KAAlC,CAAP;AACH;;AAED,mBAAOX,IAAP;AACH;;;iCAEeY,I,EAAM;AAClB,gBAAMR,SAASS,KAAKC,KAAL,CAAWF,IAAX,CAAf;AACA,mBAAO,KAAKH,UAAL,CAAgBL,MAAhB,CAAP;AACH;;;;EAjCsCW,c;;kBAAtBnB,a","file":"CompositeNode.js","sourcesContent":["import Node from \"./Node\";\nimport ValueNode from \"./ValueNode\";\n\nexport default class CompositeNode extends Node {\n    constructor(type) {\n        super(type);\n        this.isComposite = true;\n        this.children = [];\n    }\n\n    static fromObject(object) {\n        let node;\n\n        if (object == null) {\n            return null;\n        }\n\n        if (\n            typeof object.isComposite === \"boolean\" &&\n            object.isComposite &&\n            Array.isArray(object.children)\n        ) {\n            node = new CompositeNode(object.type);\n            object.children.forEach((child) => {\n                return node.children.push(CompositeNode.fromObject(child));\n            });\n        } else {\n            node = new ValueNode(object.type, object.value);\n        }\n\n        return node;\n    }\n\n    static fromJson(json) {\n        const object = JSON.parse(json);\n        return this.fromObject(object);\n    }\n\n    clone() {\n        const node = new CompositeNode(this.type);\n        node.isComposite = this.isComposite;\n\n        const children = this.children.map((child) => {\n            return child.clone();\n        });\n\n        node.children = children;\n\n        return node;\n    }\n}"]}