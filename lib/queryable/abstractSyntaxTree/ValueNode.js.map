{"version":3,"sources":["../../../src/queryable/abstractSyntaxTree/ValueNode.js"],"names":["ValueNode","type","value","node","Array","isArray","Date","Queryable","Error","Node"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEqBA,S;;;AACjB,uBAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;;AAAA,0HACfD,IADe;;AAGrB,cAAKC,KAAL,GAAaA,SAAS,IAAT,GAAgB,IAAhB,GAAuBA,KAApC;AAHqB;AAIxB;;;;gCAEO;AACJ,gBAAMC,OAAO,IAAIH,SAAJ,CAAc,KAAKC,IAAnB,EAAyB,KAAKC,KAA9B,CAAb;AACA,mBAAOC,IAAP;AACH;;;kCAEgBD,K,EAAO;AACpB,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAO,IAAIF,SAAJ,CAAc,QAAd,EAAwBE,KAAxB,CAAP;AACH,aAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACnC,uBAAO,IAAIF,SAAJ,CAAc,SAAd,EAAyBE,KAAzB,CAAP;AACH,aAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,uBAAO,IAAIF,SAAJ,CAAc,QAAd,EAAwBE,KAAxB,CAAP;AACH,aAFM,MAEA,IAAIE,MAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AAC7B,uBAAO,IAAIF,SAAJ,CAAc,OAAd,EAAuBE,KAAvB,CAAP;AACH,aAFM,MAEA,IAAIA,iBAAiBI,IAArB,EAA2B;AAC9B,uBAAO,IAAIN,SAAJ,CAAc,MAAd,EAAsBE,KAAtB,CAAP;AACH,aAFM,MAEA,IAAIA,iBAAiBK,mBAArB,EAAgC;AACnC,uBAAO,IAAIP,SAAJ,CAAc,WAAd,EAA2BE,KAA3B,CAAP;AACH,aAFM,MAEA,IAAI,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,UAAU,IAA3C,EAAiD;AACpD,uBAAO,IAAIF,SAAJ,CAAc,QAAd,EAAwBE,KAAxB,CAAP;AACH,aAFM,MAEA;AACH,sBAAM,IAAIM,KAAJ,CAAU,qBAAV,CAAN;AACH;AACJ;;;;EA9BkCC,c;;kBAAlBT,S","file":"ValueNode.js","sourcesContent":["import Node from \"./Node\";\nimport Queryable from \"../Queryable\";\n\nexport default class ValueNode extends Node {\n    constructor(type, value) {\n        super(type);\n\n        this.value = value == null ? null : value;\n    }\n\n    clone() {\n        const node = new ValueNode(this.type, this.value);\n        return node;\n    }\n\n    static fromValue(value) {\n        if (typeof value === \"string\") {\n            return new ValueNode(\"string\", value);\n        } else if (typeof value === \"boolean\") {\n            return new ValueNode(\"boolean\", value);\n        } else if (typeof value === \"number\") {\n            return new ValueNode(\"number\", value);\n        } else if (Array.isArray(value)) {\n            return new ValueNode(\"array\", value);\n        } else if (value instanceof Date) {\n            return new ValueNode(\"date\", value);\n        } else if (value instanceof Queryable) {\n            return new ValueNode(\"queryable\", value);\n        } else if (typeof value === \"object\" && value !== null) {\n            return new ValueNode(\"object\", value);\n        } else {\n            throw new Error(\"Unknown value type.\");\n        }\n    }\n}"]}