{"version":3,"sources":["../../../src/queryable/abstractSyntaxTree/ValueNode.js"],"names":["ValueNode","Node","constructor","type","value","clone","node","fromValue","Array","isArray","Date","Error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,SAAN,SAAwBC,aAAxB,CAA6B;AACxCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACrB,UAAMD,IAAN;AAEA,SAAKC,KAAL,GAAaA,KAAK,IAAI,IAAT,GAAgB,IAAhB,GAAuBA,KAApC;AACH;;AAEDC,EAAAA,KAAK,GAAG;AACJ,UAAMC,IAAI,GAAG,IAAIN,SAAJ,CAAc,KAAKG,IAAnB,EAAyB,KAAKC,KAA9B,CAAb;AACA,WAAOE,IAAP;AACH;;AAED,SAAOC,SAAP,CAAiBH,KAAjB,EAAwB;AACpB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAO,IAAIJ,SAAJ,CAAc,QAAd,EAAwBI,KAAxB,CAAP;AACH,KAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACnC,aAAO,IAAIJ,SAAJ,CAAc,SAAd,EAAyBI,KAAzB,CAAP;AACH,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,aAAO,IAAIJ,SAAJ,CAAc,QAAd,EAAwBI,KAAxB,CAAP;AACH,KAFM,MAEA,IAAII,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AAC7B,aAAO,IAAIJ,SAAJ,CAAc,OAAd,EAAuBI,KAAvB,CAAP;AACH,KAFM,MAEA,IAAIA,KAAK,YAAYM,IAArB,EAA2B;AAC9B,aAAO,IAAIV,SAAJ,CAAc,MAAd,EAAsBI,KAAtB,CAAP;AACH,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AACpD,aAAO,IAAIJ,SAAJ,CAAc,WAAd,EAA2BI,KAA3B,CAAP;AACH,KAFM,MAEA;AACH,YAAM,IAAIO,KAAJ,CAAU,qBAAV,CAAN;AACH;AACJ;;AA5BuC","sourcesContent":["import Node from \"./Node\";\nimport Queryable from \"../Queryable\";\n\nexport default class ValueNode extends Node {\n    constructor(type, value) {\n        super(type);\n\n        this.value = value == null ? null : value;\n    }\n\n    clone() {\n        const node = new ValueNode(this.type, this.value);\n        return node;\n    }\n\n    static fromValue(value) {\n        if (typeof value === \"string\") {\n            return new ValueNode(\"string\", value);\n        } else if (typeof value === \"boolean\") {\n            return new ValueNode(\"boolean\", value);\n        } else if (typeof value === \"number\") {\n            return new ValueNode(\"number\", value);\n        } else if (Array.isArray(value)) {\n            return new ValueNode(\"array\", value);\n        } else if (value instanceof Date) {\n            return new ValueNode(\"date\", value);\n        } else if (typeof value === \"object\" && value !== null) {\n            return new ValueNode(\"queryable\", value);\n        } else {\n            throw new Error(\"Unknown value type.\");\n        }\n    }\n}"],"file":"ValueNode.js"}