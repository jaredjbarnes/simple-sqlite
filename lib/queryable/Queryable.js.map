{"version":3,"sources":["../../src/queryable/Queryable.js"],"names":["defaultQuery","type","expression","select","limit","offset","orderBy","Queryable","constructor","query","provider","factory","QueryFactory","Object","assign","assertProvider","Error","and","andNode","createAndNode","queryable","clone","children","push","or","orNode","createOrNode","slice","column","builder","OperationBuilder","selectMapping","take","skip","orderByAsc","orderByDesc","toArrayAsync","getFirstAsync","getCountAsync","removeAsync","updateAsync","updates","toJson","JSON","stringify","fromObject","CompositeNode","fromJson","jsonQuery","parse"],"mappings":"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","sourcesContent":["import QueryFactory from \"./NodeFactory\";\nimport OperationBuilder from \"./OperationBuilder\";\nimport CompositeNode from \"../../lib/queryable/abstractSyntaxTree/CompositeNode\";\n\nconst defaultQuery = {\n    type: \"any\",\n    expression: null,\n    select: {},\n    limit: -1,\n    offset: 0,\n    orderBy: []\n};\n\nexport default class Queryable {\n\n    constructor({\n        query,\n        provider = null\n    }) {\n        this.factory = new QueryFactory();\n        this.query = Object.assign({}, defaultQuery, query);\n        this.query.expression = query.expression || null;\n        this.provider = provider;\n    }\n\n    assertProvider() {\n        if (this.provider == null) {\n            throw new Error(\"Null Exception: Cannot retrieve results, the provider is null.\");\n        }\n    }\n\n    and() {\n        if (this.query.expression != null && this.query.expression.type !== \"and\") {\n\n            const andNode = this.factory.createAndNode();\n            const queryable = this.clone();\n\n            andNode.children.push(queryable.query.expression);\n            queryable.query.expression = andNode;\n            return queryable;\n\n        } else if (this.query.expression != null && this.query.expression.type === \"and\") {\n            return this;\n        } else {\n            this.query.expression = this.factory.createAndNode();\n            return this;\n        }\n\n    }\n\n    or() {\n        if (this.query.expression != null && this.query.expression.type !== \"or\") {\n\n            const orNode = this.factory.createOrNode();\n            const queryable = this.clone();\n\n            orNode.children.push(queryable.query.expression);\n            queryable.query.expression = orNode;\n            return queryable;\n\n        } else if (this.query.expression != null && this.query.expression.type === \"or\") {\n            return this;\n        } else {\n            this.query.expression = this.factory.createOrNode();\n            return this;\n        }\n\n    }\n\n    clone() {\n        const queryable = new Queryable({\n            provider: this.provider,\n            query: {\n                type: this.query.type,\n                expression: this.query.expression == null ? null : this.query.expression.clone(),\n                select: Object.assign({}, this.query.select),\n                limit: this.query.limit,\n                offset: this.query.offset,\n                orderBy: this.query.orderBy.slice()\n            }\n        });\n        return queryable;\n    }\n\n    column(column) {\n        if (column == null) {\n            throw new Error(\"Null Exception: column cannot be null.\");\n        }\n\n        const builder = new OperationBuilder(this, column);\n        return builder;\n    }\n\n    select(selectMapping) {\n        const queryable = this.clone();\n        queryable.query.select = selectMapping;\n\n        return queryable;\n    }\n\n    take(take) {\n        if (typeof take !== \"number\") {\n            throw new Error(\"Illegal Argument: expected a number.\");\n        }\n\n        const queryable = this.clone();\n        queryable.query.limit = take;\n\n        return queryable;\n    }\n\n    skip(skip) {\n        if (typeof skip !== \"number\") {\n            throw new Error(\"Illegal Argument: expected a number.\");\n        }\n\n        const queryable = this.clone();\n        queryable.query.offset = skip;\n\n        return queryable;\n    }\n\n    orderByAsc(column) {\n        const queryable = this.clone();\n        queryable.query.orderBy.push({\n            \"type\": \"ASC\",\n            \"column\": column\n        });\n\n        return queryable;\n    }\n\n    orderByDesc(column) {\n        const queryable = this.clone();\n        queryable.query.orderBy.push({\n            \"type\": \"DESC\",\n            \"column\": column\n        });\n\n        return queryable;\n    }\n\n    async toArrayAsync() {\n        this.assertProvider();\n\n        return await this.provider.toArrayAsync(this);\n    }\n\n    async getFirstAsync() {\n        this.assertProvider();\n\n        return await this.provider.getFirstAsync(this);\n    }\n\n    async getCountAsync() {\n        this.assertProvider();\n\n        return await this.provider.getCountAsync(this);\n    }\n\n    async removeAsync() {\n        this.assertProvider();\n\n        return await this.provider.removeAsync(this);\n    }\n\n    async updateAsync(updates) {\n        this.assertProvider();\n\n        return await this.provider.updateAsync(this, updates);\n    }\n\n    toJson(){\n        return JSON.stringify(this.query);\n    }\n\n    static fromObject(query) {\n        query.expression = CompositeNode.fromObject(query.expression);\n\n        const queryable = new Queryable({\n            provider: this.provider,\n            query: query\n        });\n\n        return queryable;\n    }\n\n    static fromJson(jsonQuery) {\n        const query = JSON.parse(jsonQuery);\n        return Queryable.fromObject(query);\n    }\n\n}\n"],"file":"Queryable.js"}