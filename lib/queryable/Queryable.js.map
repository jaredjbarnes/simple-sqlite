{"version":3,"sources":["../../src/queryable/Queryable.js"],"names":["Queryable","type","query","expression","select","limit","Infinity","offset","orderBy","provider","factory","QueryFactory","Error","andNode","createAndNode","queryable","clone","children","push","orNode","createOrNode","Object","assign","slice","column","builder","OperationBuilder","selectMapping","take","skip","assertProvider","toArrayAsync","getFirstAsync","getCountAsync","removeAsync","entity","updateAsync"],"mappings":"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","file":"Queryable.js","sourcesContent":["import QueryFactory from \"../sqlite/factories/QueryFactory\";\nimport OperationBuilder from \"./OperationBuilder\";\n\nexport default class Queryable {\n\n    constructor({\n        type = \"any\",\n        query = {\n            expression: null,\n            select: {},\n            limit: Infinity,\n            offset: 0,\n            orderBy: []\n        },\n        provider = null\n    }) {\n        this.type = type;\n        this.factory = new QueryFactory();\n        this.query = query;\n        this.provider = provider;\n    }\n\n    assertProvider(){\n        if (this.provider == null) {\n            throw new Error(\"Null Exception: Cannot retrieve results, the provider is null.\");\n        }\n    }\n\n    and() {\n        if (this.query.expression != null && this.query.expression.type !== \"and\") {\n\n            const andNode = this.factory.createAndNode();\n            const queryable = this.clone();\n\n            andNode.children.push(queryable.query.expression);\n            queryable.query.expression = andNode;\n            return queryable;\n\n        } else if (this.query.expression != null && this.query.expression.type === \"and\") {\n            return this;\n        } else {\n            this.query.expression = this.factory.createAndNode();\n            return this;\n        }\n\n    }\n\n    or() {\n        if (this.query.expression != null && this.query.expression.type !== \"or\") {\n\n            const orNode = this.factory.createOrNode();\n            const queryable = this.clone();\n\n            orNode.children.push(queryable.query.expression);\n            queryable.query.expression = orNode;\n            return queryable;\n\n        } else if (this.query.expression != null && this.query.expression.type === \"or\") {\n            return this;\n        } else {\n            this.query.expression = this.factory.createOrNode();\n            return this;\n        }\n\n    }\n\n    clone() {\n        return new Queryable({\n            type: this.type,\n            provider: this.provider,\n            query: {\n                expression: this.query.expression == null ? null : this.query.expression.clone(),\n                select: Object.assign({}, this.query.select),\n                limit: this.query.limit,\n                offset: this.query.offset,\n                orderBy: this.query.orderBy.slice()\n            }\n        });\n    }\n\n    column(column) {\n        if (column == null) {\n            throw new Error(\"Null Exception: column cannot be null.\");\n        }\n\n        const builder = new OperationBuilder(this, column);\n        return builder;\n    }\n\n    select(selectMapping) {\n        const queryable = this.clone();\n        queryable.query.select = selectMapping;\n\n        return queryable;\n    }\n\n    take(take) {\n        const queryable = this.clone();\n        queryable.query.limit = take;\n\n        return queryable;\n    }\n\n    skip(skip) {\n        const queryable = this.clone();\n        queryable.query.offset = skip;\n\n        return queryable;\n    }\n\n    orderByAsc(column) {\n        const queryable = this.clone();\n        queryable.query.orderBy.push({\n            \"type\": \"ASC\",\n            \"column\": column\n        });\n\n        return queryable;\n    }\n\n    orderByDesc(column) {\n        const queryable = this.clone();\n        queryable.query.orderBy.push({\n            \"type\": \"DESC\",\n            \"column\": column\n        });\n\n        return queryable;\n    }\n\n    toArrayAsync() {\n        this.assertProvider();\n\n        return this.provider.toArrayAsync(this);\n    }\n\n    getFirstAsync(){\n        this.assertProvider();\n\n        return this.provider.getFirstAsync(this);\n    }\n\n    getCountAsync() {\n        this.assertProvider();\n\n        return this.provider.getCountAsync(this);\n    }\n\n    removeAsync() {\n        this.assertProvider();\n\n        return this.provider.removeAsync(this);\n    }\n\n    updateAsync(entity) {\n        this.assertProvider();\n\n        return this.provider.updateAsync(this, entity);\n    }\n\n}\n"]}