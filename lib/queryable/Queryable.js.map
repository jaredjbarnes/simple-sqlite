{"version":3,"sources":["../../src/queryable/Queryable.js"],"names":["defaultQuery","type","expression","select","limit","offset","orderBy","Queryable","query","provider","factory","QueryFactory","Object","assign","Error","andNode","createAndNode","queryable","clone","children","push","orNode","createOrNode","slice","column","builder","OperationBuilder","selectMapping","take","skip","assertProvider","toArrayAsync","getFirstAsync","getCountAsync","removeAsync","updates","updateAsync","JSON","stringify","CompositeNode","fromObject","jsonQuery","parse"],"mappings":"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","file":"Queryable.js","sourcesContent":["import QueryFactory from \"./NodeFactory\";\nimport OperationBuilder from \"./OperationBuilder\";\nimport CompositeNode from \"../../lib/queryable/abstractSyntaxTree/CompositeNode\";\n\nconst defaultQuery = {\n    type: \"any\",\n    expression: null,\n    select: {},\n    limit: -1,\n    offset: 0,\n    orderBy: []\n};\n\nexport default class Queryable {\n\n    constructor({\n        query,\n        provider = null\n    }) {\n        this.factory = new QueryFactory();\n        this.query = Object.assign({}, defaultQuery, query);\n        this.query.expression = query.expression || null;\n        this.provider = provider;\n    }\n\n    assertProvider() {\n        if (this.provider == null) {\n            throw new Error(\"Null Exception: Cannot retrieve results, the provider is null.\");\n        }\n    }\n\n    and() {\n        if (this.query.expression != null && this.query.expression.type !== \"and\") {\n\n            const andNode = this.factory.createAndNode();\n            const queryable = this.clone();\n\n            andNode.children.push(queryable.query.expression);\n            queryable.query.expression = andNode;\n            return queryable;\n\n        } else if (this.query.expression != null && this.query.expression.type === \"and\") {\n            return this;\n        } else {\n            this.query.expression = this.factory.createAndNode();\n            return this;\n        }\n\n    }\n\n    or() {\n        if (this.query.expression != null && this.query.expression.type !== \"or\") {\n\n            const orNode = this.factory.createOrNode();\n            const queryable = this.clone();\n\n            orNode.children.push(queryable.query.expression);\n            queryable.query.expression = orNode;\n            return queryable;\n\n        } else if (this.query.expression != null && this.query.expression.type === \"or\") {\n            return this;\n        } else {\n            this.query.expression = this.factory.createOrNode();\n            return this;\n        }\n\n    }\n\n    clone() {\n        const queryable = new Queryable({\n            provider: this.provider,\n            query: {\n                type: this.query.type,\n                expression: this.query.expression == null ? null : this.query.expression.clone(),\n                select: Object.assign({}, this.query.select),\n                limit: this.query.limit,\n                offset: this.query.offset,\n                orderBy: this.query.orderBy.slice()\n            }\n        });\n        return queryable;\n    }\n\n    column(column) {\n        if (column == null) {\n            throw new Error(\"Null Exception: column cannot be null.\");\n        }\n\n        const builder = new OperationBuilder(this, column);\n        return builder;\n    }\n\n    select(selectMapping) {\n        const queryable = this.clone();\n        queryable.query.select = selectMapping;\n\n        return queryable;\n    }\n\n    take(take) {\n        if (typeof take !== \"number\") {\n            throw new Error(\"Illegal Argument: expected a number.\");\n        }\n\n        const queryable = this.clone();\n        queryable.query.limit = take;\n\n        return queryable;\n    }\n\n    skip(skip) {\n        if (typeof skip !== \"number\") {\n            throw new Error(\"Illegal Argument: expected a number.\");\n        }\n\n        const queryable = this.clone();\n        queryable.query.offset = skip;\n\n        return queryable;\n    }\n\n    orderByAsc(column) {\n        const queryable = this.clone();\n        queryable.query.orderBy.push({\n            \"type\": \"ASC\",\n            \"column\": column\n        });\n\n        return queryable;\n    }\n\n    orderByDesc(column) {\n        const queryable = this.clone();\n        queryable.query.orderBy.push({\n            \"type\": \"DESC\",\n            \"column\": column\n        });\n\n        return queryable;\n    }\n\n    toArrayAsync() {\n        this.assertProvider();\n\n        return this.provider.toArrayAsync(this);\n    }\n\n    getFirstAsync() {\n        this.assertProvider();\n\n        return this.provider.getFirstAsync(this);\n    }\n\n    getCountAsync() {\n        this.assertProvider();\n\n        return this.provider.getCountAsync(this);\n    }\n\n    removeAsync() {\n        this.assertProvider();\n\n        return this.provider.removeAsync(this);\n    }\n\n    updateAsync(updates) {\n        this.assertProvider();\n\n        return this.provider.updateAsync(this, updates);\n    }\n\n    toJson(){\n        return JSON.stringify(this.query);\n    }\n\n    static fromObject(query) {\n        query.expression = CompositeNode.fromObject(query.expression);\n\n        const queryable = new Queryable({\n            provider: this.provider,\n            query: query\n        });\n\n        return queryable;\n    }\n\n    static fromJson(jsonQuery) {\n        const query = JSON.parse(jsonQuery);\n        return Queryable.fromObject(query);\n    }\n\n}\n"]}